{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-free5gc","title":"What is free5GC?","text":"<p>The free5GC is an open-source project for 5th generation (5G) mobile core networks. The ultimate goal of this project is to implement the 5G core network (5GC) defined in 3GPP Release 15 (R15) and beyond.</p> <p>Currently, the major contributors are from National Yang Ming Chiao Tung University (NYCU). Please refer to our roadmap for the features of each release.</p> <ul> <li>The source code of the latest version of free5GC can be downloaded from here.</li> <li>Follow our LinkedIn page to get the news about free5GC!</li> </ul> <p>Note</p> <p>Thank you very much for your interest in free5GC. The license of free5GC follows Apache 2.0. That is, anyone can use free5GC for commercial purposes for free. </p>"},{"location":"#sponsors","title":"Sponsors","text":""},{"location":"#platinum","title":"Platinum","text":""},{"location":"#gold","title":"Gold","text":""},{"location":"#silver","title":"Silver","text":""},{"location":"#hardware-sponsors","title":"Hardware Sponsors","text":""},{"location":"publication/","title":"Relavent Publication","text":""},{"location":"publication/#publications-using-free5gc","title":"Publications using free5GC","text":"<ol> <li> <p>V. Jain, H.-T. Chu, S. Qi, C.-A. Lee, H.-C. Chang, C.-Y. Hsieh, K. K. Ramakrishnan, and J.-C. Chen, \"L25GC: A Low Latency 5G Core Network based on High-Performance NFV Platforms,\" full paper, ACM SIGCOMM Conference (SIGCOMM \u201822), (Amsterdam, Netherlands), pp. 143\u2013157, Aug. 2022.</p> </li> <li> <p>C.-Y. Hsieh, Y.-W. Chang, C. Chen, and J.-C. Chen, \"Poster: Design and Implementation of a Generic 5G User Plane Function Development Framework,\" ACM International Conference on Mobile Computing and Networking (MobiCom \u201821), (New Orleans, United States), pp. 846\u2013848, Oct. 2021. (Won second place of the ACM MobiCom 2021 Student Research Competition)</p> </li> <li> <p>Ralf Kundel, et al., \"User plane hardware acceleration in access networks: Experiences in offloading network functions in real 5g deployments,\" Hawaii International Conference on System Sciences. Computer Society Press, 2022.</p> </li> <li> <p>Taeyun Kim, et al., \"An Implementation Study of Network Data Analytic Function in 5G,\" IEEE International Conference on Consumer Electronics, 2022.</p> </li> <li> <p>Zhou Cong, et al., \"CeUPF: Offloading 5G User Plane Function to Programmable Hardware Base on Co-existence Architecture,\" ACM International Conference on Intelligent Computing and its Emerging Applications, 2021.</p> </li> <li> <p>Gholamreza Ramezan, et al., \"EAP-ZKP: A Zero-Knowledge Proof based Authentication Protocol to Prevent DDoS Attacks at the Edge in Beyond 5G,\" IEEE 4th 5G World Forum, 2021.</p> </li> <li> <p>Ryan Pepito and Ashutosh Dutta, \"Open Source 5G Security Testbed for Edge Computing,\" IEEE 5G World Forum (5GWF), 2021.</p> </li> <li> <p>Robert MacDavid, et al., \"A P4-based 5G User Plane Function,\" 2021.</p> </li> <li> <p>Joe Breen, et al., \"Powder: Platform for Open Wireless Data-driven Experimental Research\",\" Computer Networks, 2021.</p> </li> <li> <p>Endri Goshi, et al,, \"Investigating Inter-NF Dependencies in Cloud-Native 5G Core Network,\" International Conference on Network and Service Management, 2021.</p> </li> <li> <p>Zhi-Li Zhang, et al., \"Towards aSoftware-Defined, Fine-Grained QoS Framework for 5G and Beyond Networks,\" ACM SIGCOMM Workshop on Network-Application Integration, 2021.</p> </li> <li> <p>Zujany Salazar, et al, \"5Greplay: a 5G Network Traffic Fuzzer - Application to Attack Injection,\" International Conference on Availability, Reliability and Security, 2021.</p> </li> <li> <p>Yu-Herng Chai, and Fuchun Joseph Lin, \"Evaluating Dedicated Slices of Different Configurations in 5G Core,\" Computer and Communications, 9(7), p.55-72, 2021.</p> </li> <li> <p>M.J. Kim, et al., \"Analysis of Current 5G Open-Source Projects,\" Electronics and Telecommunications Trends, 36(2), p.83-92, 2021.</p> </li> <li> <p>Yang Hu, et al., \"Fuzzing Method Based on Selection Mutation of Partition Weight Table for 5G Core Network NGAP Protocol,\" International Conference on Innovative Mobile and Internet Services in Ubiquitous Computing. Springer, Cham, 2021.</p> </li> <li> <p>Cheng-Chin Tsai, Fuchun Joseph Lin, and Hiroshige Tanaka, \"Evaluation of 5G Core Slicing on User Plane Function,\" Communications and Network, 13(3), p.79-92, 2021.</p> </li> <li> <p>Wei-Cheng Chang, and Fuchun Joseph Lin, \"Coordinated Management of 5G Core Slices by MANO and OSS/BSS,\" Computer and Communications, 9(6), p.52-72, 2021.</p> </li> <li> <p>Ayoub Bergaoui, et al., \"Demonstration of Orchestration of 5G Core Network Functions with a Satellite Emulator,\" 2021.</p> </li> <li> <p>Seungjoon Seok, et al, \"Towards Service and Networking Intelligence for Humanity: A Report on APNOMS 2020,\" Network and Systems Management, 29(4), p.1-11, 2021.</p> </li> <li> <p>Dener Kraus, \"Computa\u00e7\u00e3o de borda para ind\u00fastria utilizando a rede 5G,\" 2021.</p> </li> <li> <p>Iria M\u00edguez Gonz\u00e1lez, \"Virtualized cellular networks with native cloud functions,\" Master Thesis, Telecommunications Engineering School, 2021.</p> </li> <li> <p>Cameron MacLeod, \"Kubernetes for the Deployment of Mobile Core Networks,\" 2020.</p> </li> <li> <p>Yi-Bing Lin, Chien-Chao Tseng, and Ming-Hung Wang, \"Effects of Transport Network Slicing on 5G Applications,\" Future Internet, 13(3), p.69, 2021.</p> </li> <li> <p>Alireza Hosseini Vasoukolaei, Danish Sattar, and Ashraf Matrawy, \"TLS Performance Evaluation in the Control Plane of a 5G Core Network Slice,\" 2021.</p> </li> <li> <p>Rui Silva, et al., \"A hybrid SDN solution for mobile networks,\" Computer Networks, 2021.</p> </li> <li> <p>Wei-Lun Lin, Chien-Hsuan Chen, and Huai-Sheng Huang, \"Study on the Online Charging System in B5G Era,\" IEEE Asia-Pacific Network Operations and Management Symposium, 2021.</p> </li> <li> <p>David Lake, et al. \", \"Softwarization of 5G Networks \u2013 Implications to Open Platforms and Standardizations,\" IEEE access 9, 2021.</p> </li> <li> <p>Ali Esmaeily, and Katina Kralevska, \"Small-Scale 5G Testbeds for Network Slicing Deployment: A Systematic Review,\" Wireless Communications and Mobile Computing, 2021.</p> </li> <li> <p>Cheng-Ying Hsieh, et al., \"Design and implementation of a generic 5G user plane function development framework,\" Annual International Conference on Mobile Computing and Networking, 2021.</p> </li> <li> <p>Yu-Herng Chai, and Fuchun Joseph Lin, \",\" Computer and Communications, 9(7), p.55-72, 2021.</p> </li> <li> <p>Ashok Kumar Murthy, Ranjani Parthasarathi, and V. Vetriselvi, \"Security Testbed for Next Generation Mobile Networks,\" IEEE Third ISEA Conference on Security and Privacy, p.122-129, 2020.</p> </li> <li> <p>Tze-Jie Tan, et al., \"A Reliable Intelligent Routing Mechanism in 5G Core Network (5GC),\" Annual International Conference on Mobile Computing and Networking, 2020.</p> </li> <li> <p>Merlin Chlosta, et al., \"5G SUCI-Catchers: Still catching them all?\" Annual International Conference on Mobile Computing and Networking, 2020.</p> </li> <li> <p>Chia-Wei Liao, Fuchun Joseph Lin, and Yoichi Sato, \"Evaluating NFV-enabled Network Slicing for 5G Core,\" IEEE Asia-Pacific Network Operations and Management Symposium, 2020.</p> </li> <li> <p>\u017diga Ber\u010di\u010d, et al., \"Raziskava in prakti\u010dni preizkus odprtokodnih mobilnih jedrnih sistemov 4G in 5G,\" Diss. Univerza v Ljubljani, Fakulteta za elektrotehniko, 2020.</p> </li> <li> <p>Christian Mailer, \"Plataforma de CORE 5G em nuvem para disponibiliza\u00e7\u00e3o de fun\u00e7\u00f5es de rede como servi\u00e7o,\" 2020.</p> </li> <li> <p>Leonardo Bonati, et al., \"Open, Programmable, and Virtualized 5G Networks: State-of-the-Art and the Road Ahead,\" Computer Networks, 2020.</p> </li> <li> <p>Hung-Yen Weng, Ren-Hung Hwang, and Chin-Feng Lai, \"Live MPEG-DASH video streaming cache management with cognitive mobile edge computing,\" Ambient Intelligence and Humanized Computing p.1-18, 2020.</p> </li> <li> <p>Junaid Jalal, \"Enabling Edge Computing In 5G Via Local Area Data Network: Implementation and Experiments,\" Master Thesis, University of Agder, 2019.</p> </li> </ol>"},{"location":"videos/","title":"Other Videos","text":""},{"location":"videos/#other-videos-showing-free5gc","title":"Other videos showing free5GC","text":"<ol> <li> <p>Akraino Blueprints: Integrated Cloud Native Private Wireless, The Linux Foundation, October 11, 2021</p> </li> <li> <p>SD Core Techinar July 7 2021, Open Networking Foundation, July 13, 2021</p> </li> <li> <p>Aarna Networks MWC 2021 Demo, Aarna Networks Channel, June 27, 2021</p> </li> <li> <p>OpenStack Tacker Demo, Open Infrastructure Foundation, April 26, 2021</p> </li> <li> <p>OpenNess Tungsten Fabric free5GC demo, Aarna Networks Channel, February 16, 2021</p> </li> <li> <p>5G Core on Diamanti, Diamanti, Inc., February 3, 2021</p> </li> <li> <p>free5GC (5G Core) Orchestration on Kubernetes with Tungsten Fabric CNI and Testing, Aarna Networks Channel, December 2, 2020</p> </li> <li> <p>IoT LoRa (sensors and gateway in hardware), RAN in hardware (SDR) and software, and the free5GC, LABORA Research Group, July 3, 2020</p> </li> <li> <p>UE and eNodeB in Hardware (conventional cell phone + SDR) and free5GC: a pratical approach in 5G, LABORA Research Group, July 3, 2020</p> </li> <li> <p>OpenAirInterface and free5GC: a pratical approach in 5G networks, LABORA Research Group, June 29, 2020</p> </li> </ol>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blogs","title":"Blogs","text":""},{"location":"blog/#official","title":"Official","text":"<ul> <li>2023/6/21: 5G SCTP LoadBalancer Using LoxiLB Applying on free5GC</li> <li>2023/7/5: Use network namespace to separate the 5GC and RAN simulator</li> <li>2023/7/12: Time-Sensitive Networking over 5G system - Introduction (Rel-16)</li> <li>2023/7/19: Network function UDM introduction</li> <li>2023/7/26: How to deply free5GC network slice on OpenStack</li> </ul>"},{"location":"blog/#external","title":"External","text":"<ul> <li>Running Free5GC on Platform9 Managed Kubernetes</li> <li>Deploying 5G core network with Free5GC, Kubernetes and Helm</li> <li>Introduce to 5GC (written in traditional chinese)</li> <li>Deploy eBPF-based UPF with free5GC</li> <li>free5GC 5GC &amp; UERANSIM UE / RAN Sample Configuration - VPP-UPF with DPDK</li> </ul>"},{"location":"blog/1-free5gc-with-namespace/","title":"1 free5gc with namespace","text":""},{"location":"blog/1-free5gc-with-namespace/#use-network-namespace-to-separate-the-5g-core-5gc-and-ran-simulator","title":"Use network namespace to separate the 5G core (5GC) and RAN simulator","text":"<p>Note</p> <p>Author: Jimmy Chang Date: 2023/7/5</p>"},{"location":"blog/1-free5gc-with-namespace/#overview","title":"Overview","text":"<p>This technique leverages namespace to run UERANSIM, an opensource 5G-UE and RAN(gNodeB) simulator, and connect to free5GC.  UERANSIM follows the 3GPP specification for developing and can support multiple 5G core (5GC) including free5GC. </p> <p>Why are we using namespace? Well, you can follow ULCL and free5GC compose to set up the environment with VM and docker, but there are limitations for hardware\u2019s capability. With network namespace, you can have different and separate network instances of network  interfaces and routing tables that operate independently. </p> <p>So, what is network namespace? Network namespace makes a copy of network stack with its own routing table, firewall and devices. A named network namespace is an object at <code>/var/run/netns/</code>. The file descriptor resulting from opening <code>/var/run/netns/</code> refers to the specified network namespace. Holding that file descriptor open keeps the network namespace alive. </p> <p>And how to make both namespaces communicating? A virtual Ethernet device (veth) pair provides the abstraction that can be used to create tunnels between network namespaces, and can be used to create bridge to a physical network device in another namespace. Veth pair also be used as standalone network devices. When the namespace freed, veth device which attatch to would be destroyed.</p> <p>The environment is as follow. Suppose you have already installed as well as set up free5GC and UERANSIM properly.</p> <ul> <li>free5GC v3.3.0</li> <li>UERANSIM v3.1.0</li> </ul> <p>Note</p> <p>Namespace free5GC represents host network namespace. And enp0s5 is an ethernet interface connectting to external.</p> <p></p> <pre><code>Each devices as follow\n| Device        | IP             |\n| ------------- | -------------  |\n| veth0         | 10.200.200.1   |\n| veth1         | 10.200.200.2   |\n| br-veth0      | none           |\n| br-veth1      | none           |\n| enp0s5        | 10.211.55.23   |\n\n\nUE information in UERANSIM as follow. Already \n| IMSI             | DNN           |\n| ---------------- | ------------- |\n| 208930000000003  | internet      |\n</code></pre>"},{"location":"blog/1-free5gc-with-namespace/#configuration-file-of-free5gc-and-ueransim","title":"Configuration file of free5GC and UERANSIM","text":""},{"location":"blog/1-free5gc-with-namespace/#free5gc","title":"free5GC","text":"<ul> <li>free5gc/config/amfcfg.yaml</li> </ul> <p>Replace ngapIpList IP from <code>127.0.0.18</code> to <code>10.200.200.2</code>:</p> <p><pre><code>info:\nversion: 1.0.9\ndescription: AMF initial local configuration\n\nconfiguration:\namfName: AMF # the name of this AMF\nngapIpList:  # the IP list of N2 interfaces on this AMF\n- 10.200.200.2 # 127.0.0.18\nngapPort: 38412 # the SCTP port listened by NGAP\nsbi: # Service-based interface information\nscheme: http # the protocol for sbi (http or https)\nregisterIPv4: 127.0.0.18 # IP used to register to NRF\nbindingIPv4: 127.0.0.18  # IP used to bind the service\nport: 8000 # port used to bind the service\ntls: # the local path of TLS key\npem: cert/amf.pem # AMF TLS Certificate\nkey: cert/amf.key # AMF TLS Private key\nserviceNameList: # the SBI services provided by this AMF, refer to TS 29.518\n- namf-comm # Namf_Communication service\n- namf-evts # Namf_EventExposure service\n- namf-mt   # Namf_MT service\n- namf-loc  # Namf_Location service\n- namf-oam  # OAM service\nservedGuamiList: # Guami (Globally Unique AMF ID) list supported by this AMF\n# &lt;GUAMI&gt; = &lt;MCC&gt;&lt;MNC&gt;&lt;AMF ID&gt;\n- plmnId: # Public Land Mobile Network ID, &lt;PLMN ID&gt; = &lt;MCC&gt;&lt;MNC&gt;\nmcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)\nmnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)\namfId: cafe00 # AMF identifier (3 bytes hex string, range: 000000~FFFFFF)\nsupportTaiList:  # the TAI (Tracking Area Identifier) list supported by this AMF\n- plmnId: # Public Land Mobile Network ID, &lt;PLMN ID&gt; = &lt;MCC&gt;&lt;MNC&gt;\nmcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)\nmnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)\ntac: 000001 # Tracking Area Code (3 bytes hex string, range: 000000~FFFFFF)\nplmnSupportList: # the PLMNs (Public land mobile network) list supported by this AMF\n- plmnId: # Public Land Mobile Network ID, &lt;PLMN ID&gt; = &lt;MCC&gt;&lt;MNC&gt;\nmcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)\nmnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)\nsnssaiList: # the S-NSSAI (Single Network Slice Selection Assistance Information) list supported by this AMF\n- sst: 1 # Slice/Service Type (uinteger, range: 0~255)\nsd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)\n- sst: 1 # Slice/Service Type (uinteger, range: 0~255)\nsd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)\nsupportDnnList:  # the DNN (Data Network Name) list supported by this AMF\n- internet\nnrfUri: http://127.0.0.10:8000 # a valid URI of NRF\nsecurity:  # NAS security parameters\nintegrityOrder: # the priority of integrity algorithms\n- NIA2\n# - NIA0\ncipheringOrder: # the priority of ciphering algorithms\n- NEA0\n# - NEA2\nnetworkName:  # the name of this core network\nfull: free5GC\nshort: free\nngapIE: # Optional NGAP IEs\nmobilityRestrictionList: # Mobility Restriction List IE, refer to TS 38.413\nenable: true # append this IE in related message or not\nmaskedIMEISV: # Masked IMEISV IE, refer to TS 38.413\nenable: true # append this IE in related message or not\nredirectionVoiceFallback: # Redirection Voice Fallback IE, refer to TS 38.413\nenable: false # append this IE in related message or not\nnasIE: # Optional NAS IEs\nnetworkFeatureSupport5GS: # 5gs Network Feature Support IE, refer to TS 24.501\nenable: true # append this IE in Registration accept or not\nlength: 1 # IE content length (uinteger, range: 1~3)\nimsVoPS: 0 # IMS voice over PS session indicator (uinteger, range: 0~1)\nemc: 0 # Emergency service support indicator for 3GPP access (uinteger, range: 0~3)\nemf: 0 # Emergency service fallback indicator for 3GPP access (uinteger, range: 0~3)\niwkN26: 0 # Interworking without N26 interface indicator (uinteger, range: 0~1)\nmpsi: 0 # MPS indicator (uinteger, range: 0~1)\nemcN3: 0 # Emergency service support indicator for Non-3GPP access (uinteger, range: 0~1)\nmcsi: 0 # MCS indicator (uinteger, range: 0~1)\nt3502Value: 720  # timer value (seconds) at UE side\nt3512Value: 3600 # timer value (seconds) at UE side\nnon3gppDeregTimerValue: 3240 # timer value (seconds) at UE side\n# retransmission timer for paging message\nt3513:\nenable: true     # true or false\nexpireTime: 6s   # default is 6 seconds\nmaxRetryTimes: 4 # the max number of retransmission\n# retransmission timer for NAS Deregistration Request message\nt3522:\nenable: true     # true or false\nexpireTime: 6s   # default is 6 seconds\nmaxRetryTimes: 4 # the max number of retransmission\n# retransmission timer for NAS Registration Accept message\nt3550:\nenable: true     # true or false\nexpireTime: 6s   # default is 6 seconds\nmaxRetryTimes: 4 # the max number of retransmission\n# retransmission timer for NAS Authentication Request/Security Mode Command message\nt3560:\nenable: true     # true or false\nexpireTime: 6s   # default is 6 seconds\nmaxRetryTimes: 4 # the max number of retransmission\n# retransmission timer for NAS Notification message\nt3565:\nenable: true     # true or false\nexpireTime: 6s   # default is 6 seconds\nmaxRetryTimes: 4 # the max number of retransmission\n# retransmission timer for NAS Identity Request message\nt3570:\nenable: true     # true or false\nexpireTime: 6s   # default is 6 seconds\nmaxRetryTimes: 4 # the max number of retransmission\nlocality: area1 # Name of the location where a set of AMF, SMF, PCF and UPFs are located\nsctp: # set the sctp server setting &lt;optinal&gt;, once this field is set, please also add maxInputStream, maxOsStream, maxAttempts, maxInitTimeOut\nnumOstreams: 3 # the maximum out streams of each sctp connection\nmaxInstreams: 5 # the maximum in streams of each sctp connection\nmaxAttempts: 2 # the maximum attempts of each sctp connection\nmaxInitTimeout: 2 # the maximum init timeout of each sctp connection\ndefaultUECtxReq: false # the default value of UE Context Request to decide when triggering Initial Context Setup procedure\n\nlogger: # log output setting\nenable: true # true or false\nlevel: info # how detailed to output, value: trace, debug, info, warn, error, fatal, panic\nreportCaller: false # enable the caller report or not, value: true or false\n</code></pre> - free5gc/config/smfcfg.yaml</p> <p>Replace userplaneInformation / upNodes / UPF / interfaces / endpoints from <code>127.0.0.8</code> to <code>10.200.200.2</code>:</p> <p><pre><code>info:\nversion: 1.0.7\ndescription: SMF initial local configuration\n\nconfiguration:\nsmfName: SMF # the name of this SMF\nsbi: # Service-based interface information\nscheme: http # the protocol for sbi (http or https)\nregisterIPv4: 127.0.0.2 # IP used to register to NRF\nbindingIPv4: 127.0.0.2 # IP used to bind the service\nport: 8000 # Port used to bind the service\ntls: # the local path of TLS key\nkey: cert/smf.key # SMF TLS Certificate\npem: cert/smf.pem # SMF TLS Private key\nserviceNameList: # the SBI services provided by this SMF, refer to TS 29.502\n- nsmf-pdusession # Nsmf_PDUSession service\n- nsmf-event-exposure # Nsmf_EventExposure service\n- nsmf-oam # OAM service\nsnssaiInfos: # the S-NSSAI (Single Network Slice Selection Assistance Information) list supported by this AMF\n- sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)\nsst: 1 # Slice/Service Type (uinteger, range: 0~255)\nsd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)\ndnnInfos: # DNN information list\n- dnn: internet # Data Network Name\ndns: # the IP address of DNS\nipv4: 8.8.8.8\nipv6: 2001:4860:4860::8888\n- sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)\nsst: 1 # Slice/Service Type (uinteger, range: 0~255)\nsd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)\ndnnInfos: # DNN information list\n- dnn: internet # Data Network Name\ndns: # the IP address of DNS\nipv4: 8.8.8.8\nipv6: 2001:4860:4860::8888\nplmnList: # the list of PLMN IDs that this SMF belongs to (optional, remove this key when unnecessary)\n- mcc: 208 # Mobile Country Code (3 digits string, digit: 0~9)\nmnc: 93 # Mobile Network Code (2 or 3 digits string, digit: 0~9)\nlocality: area1 # Name of the location where a set of AMF, SMF, PCF and UPFs are located\npfcp: # the IP address of N4 interface on this SMF (PFCP)\n# addr config is deprecated in smf config v1.0.3, please use the following config\nnodeID: 127.0.0.1 # the Node ID of this SMF\nlistenAddr: 127.0.0.1 # the IP/FQDN of N4 interface on this SMF (PFCP)\nexternalAddr: 127.0.0.1 # the IP/FQDN of N4 interface on this SMF (PFCP)\nuserplaneInformation: # list of userplane information\nupNodes: # information of userplane node (AN or UPF)\ngNB1: # the name of the node\ntype: AN # the type of the node (AN or UPF)\nUPF: # the name of the node\ntype: UPF # the type of the node (AN or UPF)\nnodeID: 127.0.0.8 # the Node ID of this UPF\naddr: 127.0.0.8 # the IP/FQDN of N4 interface on this UPF (PFCP)\nsNssaiUpfInfos: # S-NSSAI information list for this UPF\n- sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)\nsst: 1 # Slice/Service Type (uinteger, range: 0~255)\nsd: 010203 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)\ndnnUpfInfoList: # DNN information list for this S-NSSAI\n- dnn: internet\npools:\n- cidr: 10.60.0.0/16\nstaticPools:\n- cidr: 10.60.100.0/24\n- sNssai: # S-NSSAI (Single Network Slice Selection Assistance Information)\nsst: 1 # Slice/Service Type (uinteger, range: 0~255)\nsd: 112233 # Slice Differentiator (3 bytes hex string, range: 000000~FFFFFF)\ndnnUpfInfoList: # DNN information list for this S-NSSAI\n- dnn: internet\npools:\n- cidr: 10.61.0.0/16\nstaticPools:\n- cidr: 10.61.100.0/24\ninterfaces: # Interface list for this UPF\n- interfaceType: N3 # the type of the interface (N3 or N9)\nendpoints: # the IP address of this N3/N9 interface on this UPF\n- 10.200.200.2 # 127.0.0.8\nnetworkInstances:  # Data Network Name (DNN)\n- internet\nlinks: # the topology graph of userplane, A and B represent the two nodes of each link\n- A: gNB1\nB: UPF\n# retransmission timer for pdu session modification command\nt3591:\nenable: true     # true or false\nexpireTime: 16s   # default is 6 seconds\nmaxRetryTimes: 3 # the max number of retransmission\n# retransmission timer for pdu session release command\nt3592:\nenable: true     # true or false\nexpireTime: 16s   # default is 6 seconds\nmaxRetryTimes: 3 # the max number of retransmission\nnrfUri: http://127.0.0.10:8000 # a valid URI of NRF\n#urrPeriod: 10 # default usage report period in seconds\n#urrThreshold: 1000 # default usage report threshold in bytes\n\nlogger: # log output setting\nenable: true # true or false\nlevel: info # how detailed to output, value: trace, debug, info, warn, error, fatal, panic\nreportCaller: false # enable the caller report or not, value: true or false\n</code></pre> - free5gc/config/upfcfg.yaml</p> <p>Replace gtpu from <code>127.0.0.8</code>to <code>10.200.200.2</code>:</p> <pre><code>version: 1.0.3\ndescription: UPF initial local configuration\n\n# The listen IP and nodeID of the N4 interface on this UPF (Can't set to 0.0.0.0)\npfcp:\naddr: 127.0.0.8   # IP addr for listening\nnodeID: 127.0.0.8 # External IP or FQDN can be reached\nretransTimeout: 1s # retransmission timeout\nmaxRetrans: 3 # the max number of retransmission\n\ngtpu:\nforwarder: gtp5g\n# The IP list of the N3/N9 interfaces on this UPF\n# If there are multiple connection, set addr to 0.0.0.0 or list all the addresses\nifList:\n- addr: 10.200.200.2 # 127.0.0.8\ntype: N3\n# name: upf.5gc.nctu.me\n# ifname: gtpif\n# mtu: 1400\n\n# The DNN list supported by UPF\ndnnList:\n- dnn: internet # Data Network Name\ncidr: 10.60.0.0/24 # Classless Inter-Domain Routing for assigned IPv4 pool of UE\n# natifname: eth0\n\nlogger: # log output setting\nenable: true # true or false\nlevel: info # how detailed to output, value: trace, debug, info, warn, error, fatal, panic\nreportCaller: false # enable the caller report or not, value: true or false\n</code></pre>"},{"location":"blog/1-free5gc-with-namespace/#ueransim","title":"UERANSIM","text":"<ul> <li> <p>UERANSIM/config/free5gc-gnb.yaml</p> </li> <li> <p>Replace ngapIp from <code>127.0.0.1</code>to <code>10.200.200.1</code></p> </li> <li> <p>Replace gtpIp from <code>127.0.0.1</code>to <code>10.200.200.1</code></p> </li> <li> <p>Replace amfConfigs / address from <code>127.0.0.1</code>to <code>10.200.200.2</code></p> </li> </ul> <p><pre><code>mcc: '208'          # Mobile Country Code value\nmnc: '93'           # Mobile Network Code value (2 or 3 digits)\n\nnci: '0x000000010'  # NR Cell Identity (36-bit)\nidLength: 32        # NR gNB ID length in bits [22...32]\ntac: 1              # Tracking Area Code\n\nlinkIp: 127.0.0.1   # gNB's local IP address for Radio Link Simulation (Usually same with local IP)\nngapIp: 10.200.200.1 # 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\ngtpIp: 10.200.200.1 # 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n# List of AMF address information\namfConfigs:\n- address: 10.200.200.2 # 127.0.0.1\nport: 38412\n\n# List of supported S-NSSAIs by this gNB\nslices:\n- sst: 0x1\nsd: 0x010203\n\n# Indicates whether or not SCTP stream number errors should be ignored.\nignoreStreamIds: true\n</code></pre> - UERANSIM/config/free5gc-ue.yaml <pre><code># IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 or 16 digits)\nsupi: 'imsi-208930000000003'\n# Mobile Country Code value\nmcc: '208'\n# Mobile Network Code value (2 or 3 digits)\nmnc: '93'\n\n# Permanent subscription key\nkey: '8baf473f2f8fd09487cccbd7097c6862'\n# Operator code (OP or OPC) of the UE\nop: '8e27b6af0e692e750f32667a3b14605d'\n# This value specifies the OP type and it can be either 'OP' or 'OPC'\nopType: 'OP'\n# Authentication Management Field (AMF) value\namf: '8000'\n# IMEI number of the device. It is used if no SUPI is provided\nimei: '356938035643803'\n# IMEISV number of the device. It is used if no SUPI and IMEI is provided\nimeiSv: '4370816125816151'\n\n# List of gNB IP addresses for Radio Link Simulation\ngnbSearchList:\n- 127.0.0.1\n\n# Initial PDU sessions to be established\nsessions:\n- type: 'IPv4'\napn: 'internet'\nslice:\nsst: 0x01\nsd: 0x010203\n\n# List of requested S-NSSAIs by this UE\nslices:\n- sst: 0x01\nsd: 0x010203\n\n# Supported encryption and integrity algorithms by this UE\nintegrity:\nIA1: true\nIA2: true\nIA3: true\nciphering:\nEA1: true\nEA2: true\nEA3: true\n</code></pre></p>"},{"location":"blog/1-free5gc-with-namespace/#environment-set-up-of-free5gc-and-ueransim","title":"Environment set up of free5GC and UERANSIM","text":"<p>First, create a namespace:</p> <p>Note</p> <p>Assume that you are either running as root, or it behoves you to prepend <code>sudo</code> to commands as necessary.</p> <p><pre><code>ip netns add ueransim\n</code></pre> Next, add the bridge: <pre><code>ip link add free5gc-br type bridge\n</code></pre> Add two pairs of veth: <pre><code>ip link add veth0 type veth peer name br-veth0\nip link add veth1 type veth peer name br-veth1\n</code></pre> Now, it could be like: <pre><code>root@free5gc:~# ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: enp0s5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:1c:42:b1:ba:f4 brd ff:ff:ff:ff:ff:ff\n    inet 10.211.55.23/24 brd 10.211.55.255 scope global dynamic enp0s5\n       valid_lft 1714sec preferred_lft 1714sec\n    inet6 fdb2:2c26:f4e4:0:21c:42ff:feb1:baf4/64 scope global dynamic mngtmpaddr noprefixroute\n       valid_lft 2591750sec preferred_lft 604550sec\n    inet6 fe80::21c:42ff:feb1:baf4/64 scope link\n       valid_lft forever preferred_lft forever\n3: enp0s6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:1c:42:f1:11:c6 brd ff:ff:ff:ff:ff:ff\n    inet 10.37.129.20/24 brd 10.37.129.255 scope global enp0s6\n       valid_lft forever preferred_lft forever\n    inet6 fdb2:2c26:f4e4:1:21c:42ff:fef1:11c6/64 scope global dynamic mngtmpaddr noprefixroute\n       valid_lft 2591750sec preferred_lft 604550sec\n    inet6 fe80::21c:42ff:fef1:11c6/64 scope link\n       valid_lft forever preferred_lft forever\n4: free5gc-br: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 4e:f6:d7:9c:50:de brd ff:ff:ff:ff:ff:ff\n5: br-veth0@veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether c2:31:0c:5f:45:81 brd ff:ff:ff:ff:ff:ff\n6: veth0@br-veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 4a:0f:1e:80:9b:be brd ff:ff:ff:ff:ff:ff\n7: br-veth1@veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 56:99:b0:82:78:0d brd ff:ff:ff:ff:ff:ff\n8: veth1@br-veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 12:5a:56:00:5b:be brd ff:ff:ff:ff:ff:ff\n</code></pre></p> <p>Next, assign interface to namespace: <pre><code>ip link set dev veth0 netns ueransim\n</code></pre> Set ip address: <pre><code>ip netns exec ueransim ip a add 10.200.200.1/24 dev veth0\n</code></pre> Enable both interface. Don't forget lo: <pre><code>ip netns exec ueransim ip link set lo up\nip netns exec ueransim ip link set veth0 up\n</code></pre> Check with <code>ip a</code>: <pre><code>root@free5gc:~# ip netns exec ueransim ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n6: veth0@if5: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state LOWERLAYERDOWN group default qlen 1000\n    link/ether 4a:0f:1e:80:9b:be brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.200.200.1/24 scope global veth0\n       valid_lft forever preferred_lft forever\n</code></pre> Set for veth1 as well: <pre><code>ip a add 10.200.200.2/24 dev veth1\nip link set veth1 up\n</code></pre> Let two interfaces attatch to bridge: <pre><code>ip link set dev br-veth0 master free5gc-br\nip link set dev br-veth1 master free5gc-br\nip link set br-veth0 up\nip link set br-veth1 up\nip link set free5gc-br up\n</code></pre> Using <code>bridge link</code> to check: <pre><code>root@free5gc:~# bridge link\n5: br-veth0@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master free5gc-br state forwarding priority 32 cost 2\n7: br-veth1@veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master free5gc-br state forwarding priority 32 cost 2\n</code></pre> Now it looks like: <pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: enp0s5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:1c:42:b1:ba:f4 brd ff:ff:ff:ff:ff:ff\n    inet 10.211.55.23/24 brd 10.211.55.255 scope global dynamic enp0s5\n       valid_lft 1000sec preferred_lft 1000sec\n    inet6 fdb2:2c26:f4e4:0:21c:42ff:feb1:baf4/64 scope global dynamic mngtmpaddr noprefixroute\n       valid_lft 2591870sec preferred_lft 604670sec\n    inet6 fe80::21c:42ff:feb1:baf4/64 scope link\n       valid_lft forever preferred_lft forever\n3: enp0s6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 00:1c:42:f1:11:c6 brd ff:ff:ff:ff:ff:ff\n    inet 10.37.129.20/24 brd 10.37.129.255 scope global enp0s6\n       valid_lft forever preferred_lft forever\n    inet6 fdb2:2c26:f4e4:1:21c:42ff:fef1:11c6/64 scope global dynamic mngtmpaddr noprefixroute\n       valid_lft 2591870sec preferred_lft 604670sec\n    inet6 fe80::21c:42ff:fef1:11c6/64 scope link\n       valid_lft forever preferred_lft forever\n4: free5gc-br: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 56:99:b0:82:78:0d brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::5499:b0ff:fe82:780d/64 scope link\n       valid_lft forever preferred_lft forever\n5: br-veth0@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master free5gc-br state UP group default qlen 1000\n    link/ether c2:31:0c:5f:45:81 brd ff:ff:ff:ff:ff:ff link-netns ueransim\n    inet6 fe80::c031:cff:fe5f:4581/64 scope link\n       valid_lft forever preferred_lft forever\n7: br-veth1@veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master free5gc-br state UP group default qlen 1000\n    link/ether 56:99:b0:82:78:0d brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::5499:b0ff:fe82:780d/64 scope link\n       valid_lft forever preferred_lft forever\n8: veth1@br-veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 12:5a:56:00:5b:be brd ff:ff:ff:ff:ff:ff\n    inet 10.200.200.2/24 scope global veth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::105a:56ff:fe00:5bbe/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre> Let's test it:</p> <p>Note</p> <p>You can perform <code>ip netns exec ueransim /bin/bash --rcfile &lt;(echo \"PS1=\\\"ueransim&gt; \\\"\")</code> to enter namespace and modify shell prefix.</p> <p><pre><code>root@free5gc:~# ip netns exec ueransim /bin/bash --rcfile &lt;(echo \"PS1=\\\"ueransim&gt; \\\"\")\nueransim&gt; ping -c2 10.200.200.2\nPING 10.200.200.2 (10.200.200.2) 56(84) bytes of data.\n64 bytes from 10.200.200.2: icmp_seq=1 ttl=64 time=0.089 ms\n64 bytes from 10.200.200.2: icmp_seq=2 ttl=64 time=0.226 ms\n\n--- 10.200.200.2 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1020ms\nrtt min/avg/max/mdev = 0.089/0.157/0.226/0.068 ms\n</code></pre> Insert default routing rule: <pre><code>ueransim&gt; ip route add default via 10.200.200.2\nueransim&gt; netstat -rn\nKernel IP routing table\nDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface\n0.0.0.0         10.200.200.2    0.0.0.0         UG        0 0          0 veth0\n10.200.200.0    0.0.0.0         255.255.255.0   U         0 0          0 veth0\n</code></pre> Try to ping 8.8.8.8: <pre><code>ueransim&gt; ping -c2 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n\n--- 8.8.8.8 ping statistics ---\n2 packets transmitted, 0 received, 100% packet loss, time 1028ms\n</code></pre> It is because the main host must translate the source addresses. Besides, the main host need to forward packet: <pre><code>root@free5gc:~# iptables -t nat -A POSTROUTING -o enp0s5 -j MASQUERADE\nroot@free5gc:~# sysctl -w net.ipv4.ip_forward=1\nroot@free5gc:~# sudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre> And then: <pre><code>ueransim&gt; ping -c2 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=127 time=13.9 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=127 time=28.0 ms\n\n--- 8.8.8.8 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1002ms\nrtt min/avg/max/mdev = 13.866/20.939/28.012/7.073 ms\n</code></pre></p> <p>After free5GC execute <code>run.sh</code>, it's time for UERANSIM:</p> <p>In terminal 1: <pre><code>ueransim&gt; build/nr-gnb -c config/free5gc-gnb.yaml\nUERANSIM v3.1.0\n[2023-07-05 19:58:26.368] [sctp] [info] Trying to establish SCTP connection... (10.200.200.2:38412)\n[2023-07-05 19:58:26.373] [sctp] [info] SCTP connection established (10.200.200.2:38412)\n[2023-07-05 19:58:26.374] [sctp] [debug] SCTP association setup ascId[3]\n[2023-07-05 19:58:26.375] [ngap] [debug] Sending NG Setup Request\n[2023-07-05 19:58:26.380] [ngap] [debug] NG Setup Response received\n[2023-07-05 19:58:26.380] [ngap] [info] NG Setup procedure is successful\n[2023-07-05 19:58:35.804] [mr] [info] New UE connected to gNB. Total number of UEs is now: 1\n[2023-07-05 19:58:35.806] [rrc] [debug] Sending RRC Setup for UE[3]\n[2023-07-05 19:58:35.807] [ngap] [debug] Initial NAS message received from UE 3\n[2023-07-05 19:58:35.869] [ngap] [debug] Initial Context Setup Request received\n[2023-07-05 19:58:36.108] [ngap] [info] PDU session resource is established for UE[3] count[1]\n</code></pre> In terminal 2: <pre><code>ueransim&gt; sudo build/nr-ue -c config/free5gc-ue.yaml\nUERANSIM v3.1.0\n[2023-07-05 19:58:35.803] [nas] [debug] NAS layer started\n[2023-07-05 19:58:35.803] [rrc] [debug] RRC layer started\n[2023-07-05 19:58:35.804] [nas] [info] UE switches to state: MM-DEREGISTERED/PLMN-SEARCH\n[2023-07-05 19:58:35.804] [nas] [info] UE connected to gNB\n[2023-07-05 19:58:35.804] [nas] [info] UE switches to state: MM-DEREGISTERED/NORMAL-SERVICE\n[2023-07-05 19:58:35.804] [nas] [info] UE switches to state: MM-REGISTERED-INITIATED/NA\n[2023-07-05 19:58:35.805] [rrc] [debug] Sending RRC Setup Request\n[2023-07-05 19:58:35.806] [rrc] [info] RRC connection established\n[2023-07-05 19:58:35.806] [nas] [info] UE switches to state: CM-CONNECTED\n[2023-07-05 19:58:35.838] [nas] [debug] Received rand[61262F32A617D0BAD716603B1CBDA477] autn[44778026F4238000FC14B59D68855328]\n[2023-07-05 19:58:35.838] [nas] [debug] Calculated res[47759045F5ACEA59] ck[1C559301F29EF49572F5D150B3B99288] ik[D223317F752F233CE4C7AA253644D882] ak[528433D1FBE6] mac_a[FC14B59D68855328]\n[2023-07-05 19:58:35.838] [nas] [debug] Used snn[5G:mnc093.mcc208.3gppnetwork.org] sqn[16F3B3F70FC5]\n[2023-07-05 19:58:35.838] [nas] [debug] Derived kSeaf[7FC8B7FB1B141B6579B9C0FAEB9CCF1312FE9F9634868E234756DE49FD67C5F1] kAusf[FA0402A892E6046D52F4DECACA40B2A75B698FCEAD5EB320139FC69B77BD4C46] kAmf[3D4AD68E153B9642ACBECC67AD399015F7CB578F9DF4C88A35EED99C72C9B95B]\n[2023-07-05 19:58:35.843] [nas] [debug] Derived kNasEnc[1F829EB2BA238DD0226C3484E6A79D1F] kNasInt[251C0412B1BAD88A9DD0008F32D6F216]\n[2023-07-05 19:58:35.843] [nas] [debug] Selected integrity[2] ciphering[0]\n[2023-07-05 19:58:35.869] [nas] [debug] T3512 started with int[3600]\n[2023-07-05 19:58:35.869] [nas] [info] UE switches to state: MM-REGISTERED/NORMAL-SERVICE\n[2023-07-05 19:58:35.869] [nas] [info] Initial Registration is successful\n[2023-07-05 19:58:35.869] [nas] [info] Initial PDU sessions are establishing [1#]\n[2023-07-05 19:58:35.869] [nas] [debug] Sending PDU session establishment request\n[2023-07-05 19:58:36.108] [nas] [info] PDU Session establishment is successful PSI[1]\n[2023-07-05 19:58:36.113] [app] [info] Connection setup for PDU session[1] is successful, TUN interface[uesimtun0, 10.60.0.1] is up.\n</code></pre> In terminal 3: <pre><code>ueransim&gt; ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: uesimtun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none\n    inet 10.60.0.1/32 scope global uesimtun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::b5ef:5b4:e3f6:af64/64 scope link stable-privacy\n       valid_lft forever preferred_lft forever\n6: veth0@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 4a:0f:1e:80:9b:be brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.200.200.1/24 scope global veth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::480f:1eff:fe80:9bbe/64 scope link\n       valid_lft forever preferred_lft forever\nueransim&gt; ping -c2 -I uesimtun0 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) from 10.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=127 time=19.5 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=127 time=33.2 ms\n\n--- 8.8.8.8 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1006ms\nrtt min/avg/max/mdev = 19.478/26.348/33.219/6.870 ms\n</code></pre> Also ping to google.com: <pre><code>ueransim&gt; ping -c2 -I uesimtun0 google.com\nPING google.com (172.217.160.110) from 10.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from tsa03s06-in-f14.1e100.net (172.217.160.110): icmp_seq=1 ttl=127 time=17.3 ms\n64 bytes from tsa03s06-in-f14.1e100.net (172.217.160.110): icmp_seq=2 ttl=127 time=29.5 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1005ms\nrtt min/avg/max/mdev = 17.295/23.385/29.476/6.090 ms\n</code></pre></p>"},{"location":"blog/1-free5gc-with-namespace/#what-if-two-ueransims-with-two-namespaces","title":"What if two UERANSIMs with two namespaces?","text":"<p>Same as before, you should create another namespace for UERANSIM, called it ueransim2: <pre><code>root@free5gc:~# ip netns ls\nueransim2 (id: 1)\nueransim (id: 0)\n</code></pre> And then: <pre><code>ip link add veth2 type veth peer name br-veth2\nip link set dev veth2 netns ueransim2\nip link set br-veth2 master free5gc-br\nip link set br-veth2 up\nip netns exec ueransim2 ip a add 10.200.200.3/24 dev veth2\nip netns exec ueransim2 ip link set lo up\nip netns exec ueransim2 ip link set veth2 up\nip netns exec ueransim2 ip route add default via 10.200.200.2\n</code></pre></p> <p>Copy UERANSIM/config/free5gc-gnb.yaml and UERANSIM/config/free5gc-ue.yaml to free5gc-gnb2.yaml and free5gc-ue2.yaml, modify:</p> <p>free5gc-gnb2.yaml</p> <ul> <li>Replace ngapIp from <code>127.0.0.1</code> to <code>10.200.200.3</code></li> <li>Replace gtpIp from <code>127.0.0.1</code> to <code>10.200.200.3</code></li> </ul> <p><pre><code>...\nngapIp: 10.200.200.3 # 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\ngtpIp: 10.200.200.3 # 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n# List of AMF address information\namfConfigs:\n- address: 10.200.200.2 # 127.0.0.1\nport: 38412\n...\n</code></pre> free5gc-ue2.yaml</p> <p><code>supi</code> change to <code>imsi-208930000000004</code></p> <pre><code>...\n# IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 or 16 digits)\nsupi: 'imsi-208930000000004'\n...\n</code></pre> <p>Note</p> <p>Should register ue to webconsole first.</p> <p>The result: <pre><code>ueransim&gt; ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n6: veth0@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 4a:0f:1e:80:9b:be brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.200.200.1/24 scope global veth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::480f:1eff:fe80:9bbe/64 scope link\n       valid_lft forever preferred_lft forever\n7: uesimtun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none\n    inet 10.60.0.1/32 scope global uesimtun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::f6d7:dd81:fe7f:496a/64 scope link stable-privacy\n       valid_lft forever preferred_lft forever\nueransim&gt; ping -c2 -I uesimtun0 google.com\nPING google.com (172.217.160.110) from 10.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from tsa03s06-in-f14.1e100.net (172.217.160.110): icmp_seq=1 ttl=127 time=17.2 ms\n64 bytes from tsa03s06-in-f14.1e100.net (172.217.160.110): icmp_seq=2 ttl=127 time=28.5 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1003ms\nrtt min/avg/max/mdev = 17.200/22.863/28.527/5.663 ms\n</code></pre></p> <pre><code>ueransim2&gt; ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n5: uesimtun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none \n    inet 10.60.0.2/32 scope global uesimtun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::16a4:523a:a86:bf83/64 scope link stable-privacy \n       valid_lft forever preferred_lft forever\n12: veth2@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether fa:12:bb:9c:fa:40 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.200.200.3/24 scope global veth2\n       valid_lft forever preferred_lft forever\n    inet6 fe80::f812:bbff:fe9c:fa40/64 scope link \n       valid_lft forever preferred_lft forever\nueransim2&gt; ping -c2 -I uesimtun0 google.com\nPING google.com (172.217.160.110) from 10.60.0.2 uesimtun0: 56(84) bytes of data.\n64 bytes from tsa03s06-in-f14.1e100.net (172.217.160.110): icmp_seq=1 ttl=127 time=18.9 ms\n64 bytes from tsa03s06-in-f14.1e100.net (172.217.160.110): icmp_seq=2 ttl=127 time=15.8 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1002ms\nrtt min/avg/max/mdev = 15.786/17.353/18.921/1.567 ms\n</code></pre>"},{"location":"blog/1-free5gc-with-namespace/#about","title":"About","text":"<p>Hi, my name is Jimmy Chang. The current research topic is 5G LAN with a focus on the 5G Data Plane. Any questions or errors in the article are welcome for correction. Please feel free to send an email to provide feedback.</p> <ul> <li>Graduate student major in 5GC Research</li> <li>LinkedIn</li> </ul>"},{"location":"blog/1-free5gc-with-namespace/#reference","title":"Reference","text":"<ul> <li>https://github.com/s5uishida/free5gc_ueransim_ulcl_sample_config</li> <li>https://github.com/free5gc/free5gc/blob/main/test_ulcl.sh</li> <li>https://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/</li> <li>https://man7.org/linux/man-pages/man7/namespaces.7.html</li> <li>https://linux.die.net/man/8/iptables</li> </ul>"},{"location":"blog/TSN/","title":"TSN","text":""},{"location":"blog/TSN/#time-sensitive-networking-over-5g-system-introduction-rel-16","title":"Time-Sensitive Networking over 5G system - Introduction (Rel-16)","text":"<p>Note</p> <p>Author: Ya-shih Tseng Date: 2023/7/12</p> <p>This blog focuses on the role of the 5G system in 3GPP Release 16 TSN (Time-Sensitive Networking).</p>"},{"location":"blog/TSN/#what-is-time-sensitive-network-tsn","title":"What is Time-Sensitive Network (TSN)","text":"<p>Traditional Ethernet technology can only achieve \"best-effort\" communication and cannot meet the high reliability and low latency requirements of industrial manufacturing applications. Therefore, in the context of industrial automation, there is a need to upgrade the traditional \"best-effort\" Ethernet to provide \"deterministic\" services.</p> <p>Time Sensitive Networking (TSN) brings determinism and real-time communication to standard Ethernet through mechanisms and protocols defined by the IEEE 802.1 standard, which is used by Audio Video Bridging (AVB) and TSN. It offers reliable message delivery, minimized jitter, and guaranteed delivery through central management, time scheduling, and other key features. The introduction of TSN technology holds great potential and benefits for real-time applications in industrial control, automation, and other fields. </p> <p>TSN_OSI_layer</p>"},{"location":"blog/TSN/#tsn-standard","title":"TSN Standard","text":"<p>There are a lot of standards that TSN task group has completed or ongoing projects. Here are some base standards.</p> Standard Title IEEE 1588 V2 Precision Clock Synchronization Protocol for Networked Measurement and Control Systems IEEE 802.1Q-2022 Bridges and Bridged Networks IEEE 802.1AB-2016 Station and Media Access Control Connectivity Discovery (specifies the Link Layer Discovery Protocol (LLDP)) IEEE 802.1AS-2020 Timing and Synchronization for Time-Sensitive Applications IEEE 802.1AX-2020 Link Aggregation IEEE 802.1CB-2017 Frame Replication and Elimination for Reliability IEEE 802.1CS-2020 Link-local Registration Protocol"},{"location":"blog/TSN/#the-role-of-5g-system-in-tsn","title":"The role of 5G system in TSN","text":"<p>With the increasing demands for wireless control in applications such as industrial automation, remote surgical operations, smart grid distribution automation, transportation safety, autonomous driving, and more, there is a growing need to meet the low-latency requirements of these applications while achieving management, scheduling, and traffic planning. Time synchronization becomes a critical aspect. The following will explain how the interaction between TSN and 5G systems enables time synchronization.</p>"},{"location":"blog/TSN/#time-synchronization","title":"Time Synchronization","text":"<p>To achieve time synchronization between TSN and 5G systems, TSN utilizes the time synchronization method defined in IEEE 802.1AS, which is the generalized Precision Time Protocol (gPTP). gPTP supports time synchronization for Time-aware end stations and Time-aware Bridges in Layer 2.  In the 3GPP TS23.501 release 16 specification, the 5G system plays the role of a \"Time-aware system\" as defined in IEEE 802.1AS and is designated as a Logical bridge, connecting TSN system end stations.</p> <p>Note</p> <p>gPTP is an extended version of PTP (Precision Time Protocol) that primarily expands support for second-layer network devices.</p> <p>How can we synchronize the time of two end stations into the same time domain?</p> <p>First, the time synchronization architecture includes Master clocks and Slave clocks. The Master regularly sends sync messages to allow the Slave to obtain the Master's time. The Slave, in turn, periodically sends peer delay requests to exchange messages with the Master, obtaining the delay time between the two devices for time correction. Additionally, the resident time, which is the message propagation delay introduced by bridges, should also be taken into account. By considering all these factors, the time synchronization of both sides can be achieved within the TSN time domain. </p> <p>Time Synchronization process of gPTP</p> <p>Check the link for more detail about how PTP works.</p>"},{"location":"blog/TSN/#intergration-of-tsn-and-5g","title":"Intergration of TSN and 5G","text":"<p>By now, I believe you have gained an understanding of the time synchronization mechanism in TSN. Let's briefly explain how the 5G system supports TSN as a logical TSN bridge.  The 3GPP has defined new functionalities such as NW-TT, DS-TT, and TSN-AF, as well as TSN control nodes like CUC and CNC. Please check TS 23.501 Release 16 for more details. </p> <p>System architecture of 5G support TSN</p>"},{"location":"blog/TSN/#support-ethernet-type-pdu-session","title":"Support Ethernet type PDU session","text":"<p>To archive the intergration, 5G system should support ingress port and egress port pair via an Ethernet Type PDU session between the corresponding UE and UPF. As mentioned above, gPTP supports layer 2 (Ethernet) only.</p>"},{"location":"blog/TSN/#ds-tt-and-nw-tt","title":"DS-TT and NW-TT","text":"<p>In the 5G system, DS-TT (Device-side TSN translator) and NW-TT (Network-side TSN translator) serve as TSN translators. DS-TT is responsible for connecting TSN Slave endpoints with the UE, while NW-TT connects TSN Master endpoints with the UPF.</p> <p>When the sync message generated by the Master clock reaches the bridge, NW-TT captures its Ingress Timestamp and measures the delay between NW-TT and the Master clock. These timestamps are then embedded within the sync message and transmitted to the UE. Once the UE receives the sync message, DS-TT calculates the resident time by subtracting the Ingress Timestamp provided in the sync message, from the Egress Timestamp which represents the time of sync message reception. The resident time is added to the delay time mentioned in the sync message to determine the corrected time. Through the assistance of the TSN translators, the Slave endpoint receives the message and obtains information about time deviation and other relevant data for further adjustment.</p> <p>Note</p> <p>DS-TT and NW-TT enable the 5G system to function as a virtual bridge. The bridge is also called \"Transparent clock\" which is definded in IEEE 1588 and required in IEEE 802.1AS. You can say that Master and Slaver don't know the exist of the 5G TSN bridge, since it's logical transparent.</p> <p>\"Transparent clocks are used to route timing messages within a network. Used when: Ethernet timing must pass through switches.\" - different type of clocks</p>"},{"location":"blog/TSN/#tsn-af","title":"TSN-AF","text":"<p>With TSN-AF, CNC can manage the 5G system functioning as a logical bridge and achieve the integration of the 5G TSN bridge with the TSN network in collaboration with NW-TT and DS-TT. Additionally, TSN-AF gathers information and capability lists of the 5G TSN Bridge and transmits them to CNC.</p>"},{"location":"blog/TSN/#tsn-control-nodes","title":"TSN control nodes","text":"<p>To meet the requirements of application services and control TSN, there are two key functions utilized in the TSN system. CNC (Centralized Network Controller), as the central controller in the TSN system, receives the information from CUC (Centralized User Configuration) and performs scheduling and planning tasks. It calculates the optimal transmission schedule for the TSN traffic based on factors such as bandwidth requirements, latency constraints, and network conditions. Once the transmission schedule is computed and confirmed, CNC proceeds to deploy the necessary network resource configuration on the TSN switches. This ensures that the TSN network operates efficiently and effectively in delivering the required QoS (Quality of Service) for the application services.</p>"},{"location":"blog/TSN/#reference","title":"Reference","text":"<ul> <li>IEEE Std 802.1AS-2020: \u201cIEEE Standard for Local and metropolitan area networks--Timing and Synchronization for Time-Sensitive Applications\u201d.</li> <li>IEEE Std 1588: \u201cIEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems\u201d, Edition 2019.</li> <li>3GPP TS 23.501 Release 16</li> <li>Time-Sensitive Networking - Wikipedia</li> <li>Time-Sensitive Networking (TSN) Task Group | - IEEE 802.1</li> </ul>"},{"location":"blog/TSN/#about","title":"About","text":"<p>Hi, This is Ya-shih Tseng. I am currently researching the implementation of 5G TSN (Time-Sensitive Networking) as part of my master's studies. In the future, I will introduce more information about TSN. Hope you enjoy it.</p>"},{"location":"blog/UDM_introduce/","title":"Network function UDM introduction","text":"<p>Note</p> <p>Author: \u5f35\u54f2\u777f Date: 2023/7/19</p>"},{"location":"blog/UDM_introduce/#overview","title":"Overview","text":"<p>In this article, I will introduce UDM and its three services that will be used in the general UE registration procedure (Nudm_UECM service, Nudm_SubscriberDataManagement Service, and Nudm_UEAuthentication service) to let everyone understand UDM more clearly.</p>"},{"location":"blog/UDM_introduce/#udm","title":"UDM","text":"<p>Unified Data Management is responsible for managing information related to UE. When other NFs need to use the UE subscription information, they will obtain it from UDM through the SBI of UDM.</p>"},{"location":"blog/UDM_introduce/#nudm_ueauthentication-service","title":"Nudm_UEAuthentication Service","text":"<p>This service is used by AUSF to retrieve authentication-related information and, after authentication, confirm the result.</p> <p></p> <p>3GPP TS33.501 v15.2.0</p> <p>In Authentication, AUSF uses the GET operation to retrieve authentication information for the UE. The request contains the UE\u2019s identity (supi or suci) and the serving network name. The serving network name is used in the derivation of the anchor key, which is used by subsensual authentication. UE\u2019s identity will be contained in the URI, and the serving network name will be contained in the request body.</p> <p>Upon reception of the Nudm_UEAuthentication_Get Request, the UDM shall de-conceal SUCI to gain SUPI if SUCI is received. At this time, UDM will query the authentication subscription data from UDR. Then, UDM shall select the authentication method based on SUPI, and if required (e.g., 5G-AKA), UDM will calculate the authentication vector and pass it to AUSF.</p> <ul> <li>SUPI: A globally unique 5G Subscription Permanent Identifier, used to identify UE.</li> <li>SUCI: Subscription concealed identifier, obtained by encrypting supi through the Home Network Public Key so that supi will not be obtained by a third party on the network.</li> </ul> <pre><code>logger.UeauLog.Traceln(\"In GenerateAuthDataProcedure\")\n\nresponse = &amp;models.AuthenticationInfoResult{}\nrand.Seed(time.Now().UnixNano())\nsupi, err := suci.ToSupi(supiOrSuci, udm_context.Getself().SuciProfiles)\nif err != nil {\nproblemDetails = &amp;models.ProblemDetails{\nStatus: http.StatusForbidden,\nCause:  authenticationRejected,\nDetail: err.Error(),\n}\n\nlogger.UeauLog.Errorln(\"suciToSupi error: \", err.Error())\nreturn nil, problemDetails\n}\n\nlogger.UeauLog.Tracef(\"supi conversion =&gt; [%s]\", supi)\n\nclient, err := createUDMClientToUDR(supi)\nif err != nil {\nreturn nil, openapi.ProblemDetailsSystemFailure(err.Error())\n}\nauthSubs, res, err := client.AuthenticationDataDocumentApi.QueryAuthSubsData(context.Background(), supi, nil)\n\n//in the udm/internal/sbi/producer/generate_auth_data.go, GenerateAuthDataProcedure function.\n</code></pre> <p>From the code, we can see UDM first de-conceal SUCI (line 5), then use QueryAuthSubsData to get authSub from UDR. After that, UDM uses this information to create the authentication vector.</p> <p>Then we record the packet sent in the registration process and find the packet according to the URI specified by the specification. We can find the packet corresponding to this service.</p> <p></p> <p>Open the response packet, and we can see the response body matches the AuthenticationInfoResult data type.</p> <p></p> <p></p> <p>3GPP TS29.503 v15.2.1</p> <p>After AUSF authenticates the UE, it will confirm the result with UDM. These details will be used in linking authentication confirmation to the Nudm_UECM_Registration procedure from AMF.</p> <pre><code>func communicateWithUDM(ue *context.AmfUe, accessType models.AccessType) error {\nue.GmmLog.Debugln(\"communicateWithUDM\")\namfSelf := context.GetSelf()\n\n// UDM selection described in TS 23.501 6.3.8\n// TODO: consider udm group id, Routing ID part of SUCI, GPSI or External Group ID (e.g., by the NEF)\nparam := Nnrf_NFDiscovery.SearchNFInstancesParamOpts{\nSupi: optional.NewString(ue.Supi),\n}\nresp, err := consumer.SendSearchNFInstances(amfSelf.NrfUri, models.NfType_UDM, models.NfType_AMF, &amp;param)\nif err != nil {\nreturn errors.Errorf(\"AMF can not select an UDM by NRF: SendSearchNFInstances failed\")\n}\n\nvar uecmUri, sdmUri string\nfor _, nfProfile := range resp.NfInstances {\nue.UdmId = nfProfile.NfInstanceId\nuecmUri = util.SearchNFServiceUri(nfProfile, models.ServiceName_NUDM_UECM, models.NfServiceStatus_REGISTERED)\nsdmUri = util.SearchNFServiceUri(nfProfile, models.ServiceName_NUDM_SDM, models.NfServiceStatus_REGISTERED)\nif uecmUri != \"\" &amp;&amp; sdmUri != \"\" {\nbreak\n}\n}\nue.NudmUECMUri = uecmUri\nue.NudmSDMUri = sdmUri\nif ue.NudmUECMUri == \"\" || ue.NudmSDMUri == \"\" {\nreturn errors.Errorf(\"AMF can not select an UDM by NRF: SearchNFServiceUri failed\")\n}\n\nproblemDetails, err := consumer.UeCmRegistration(ue, accessType, true)\nif problemDetails != nil {\nreturn errors.Errorf(problemDetails.Cause)\n} else if err != nil {\nreturn errors.Wrap(err, \"UECM_Registration Error\")\n}\n\n// TS 23.502 4.2.2.2.1 14a-c.\n// \"After a successful response is received, the AMF subscribes to be notified\n//      using Nudm_SDM_Subscribe when the data requested is modified\"\nproblemDetails, err = consumer.SDMGetAmData(ue)\nif problemDetails != nil {\nreturn errors.Errorf(problemDetails.Cause)\n} else if err != nil {\nreturn errors.Wrap(err, \"SDM_Get AmData Error\")\n}\n\nproblemDetails, err = consumer.SDMGetSmfSelectData(ue)\nif problemDetails != nil {\nreturn errors.Errorf(problemDetails.Cause)\n} else if err != nil {\nreturn errors.Wrap(err, \"SDM_Get SmfSelectData Error\")\n}\n\nproblemDetails, err = consumer.SDMGetUeContextInSmfData(ue)\nif problemDetails != nil {\nreturn errors.Errorf(problemDetails.Cause)\n} else if err != nil {\nreturn errors.Wrap(err, \"SDM_Get UeContextInSmfData Error\")\n}\n\nproblemDetails, err = consumer.SDMSubscribe(ue)\nif problemDetails != nil {\nreturn errors.Errorf(problemDetails.Cause)\n} else if err != nil {\nreturn errors.Wrap(err, \"SDM Subscribe Error\")\n}\nue.ContextValid = true\nreturn nil\n}\n\n\n//in the amf/internal/gmm/handler.go.\n</code></pre> <p>Next, let's take a look at this function. It is called in HandleInitialRegistration, which handles UE's initial registration. UeCmRegistration will use the Nudm_UECM (UECM) service to store related UE Context Management information in UDM. In lines 40, 47, and 54, AMF uses the Nudm_SubscriberDataManagement (SDM) Service to get some subscribe data.</p>"},{"location":"blog/UDM_introduce/#nudm_uecontextmanagement-service","title":"Nudm_UEContextManagement Service","text":"<p>In the UeCmRegistration function, AMF registers as UE's serving NF on UDM and stores related UE Context Management information in UDM. Looking at the packet, you can see that the request body contains <code>amfInstanceId</code> and <code>guami</code>, representing the amf identity, and <code>ratType</code>, representing the radio access technology type used by UE.</p> <p></p> <pre><code>// TS 29.503 5.3.2.2.2\nfunc RegistrationAmf3gppAccessProcedure(registerRequest models.Amf3GppAccessRegistration, ueID string) (\nheader http.Header, response *models.Amf3GppAccessRegistration, problemDetails *models.ProblemDetails,\n) {\n// TODO: EPS interworking with N26 is not supported yet in this stage\nvar oldAmf3GppAccessRegContext *models.Amf3GppAccessRegistration\nif udm_context.Getself().UdmAmf3gppRegContextExists(ueID) {\nue, _ := udm_context.Getself().UdmUeFindBySupi(ueID)\noldAmf3GppAccessRegContext = ue.Amf3GppAccessRegistration\n}\n\nudm_context.Getself().CreateAmf3gppRegContext(ueID, registerRequest)\n\nclientAPI, err := createUDMClientToUDR(ueID)\nif err != nil {\nreturn nil, nil, openapi.ProblemDetailsSystemFailure(err.Error())\n}\n\nvar createAmfContext3gppParamOpts Nudr_DataRepository.CreateAmfContext3gppParamOpts\noptInterface := optional.NewInterface(registerRequest)\ncreateAmfContext3gppParamOpts.Amf3GppAccessRegistration = optInterface\nresp, err := clientAPI.AMF3GPPAccessRegistrationDocumentApi.CreateAmfContext3gpp(context.Background(),\nueID, &amp;createAmfContext3gppParamOpts)\nif err != nil {\nlogger.UecmLog.Errorln(\"CreateAmfContext3gpp error : \", err)\nproblemDetails = &amp;models.ProblemDetails{\nStatus: int32(resp.StatusCode),\nCause:  err.(openapi.GenericOpenAPIError).Model().(models.ProblemDetails).Cause,\nDetail: err.Error(),\n}\nreturn nil, nil, problemDetails\n}\ndefer func() {\nif rspCloseErr := resp.Body.Close(); rspCloseErr != nil {\nlogger.UecmLog.Errorf(\"CreateAmfContext3gpp response body cannot close: %+v\", rspCloseErr)\n}\n}()\n\n// TS 23.502 4.2.2.2.2 14d: UDM initiate a Nudm_UECM_DeregistrationNotification to the old AMF\n// corresponding to the same (e.g. 3GPP) access, if one exists\nif oldAmf3GppAccessRegContext != nil {\nderegistData := models.DeregistrationData{\nDeregReason: models.DeregistrationReason_SUBSCRIPTION_WITHDRAWN,\nAccessType:  models.AccessType__3_GPP_ACCESS,\n}\ncallback.SendOnDeregistrationNotification(ueID, oldAmf3GppAccessRegContext.DeregCallbackUri,\nderegistData) // Deregistration Notify Triggered\n\nreturn nil, nil, nil\n} else {\nheader = make(http.Header)\nudmUe, _ := udm_context.Getself().UdmUeFindBySupi(ueID)\nheader.Set(\"Location\", udmUe.GetLocationURI(udm_context.LocationUriAmf3GppAccessRegistration))\nreturn header, &amp;registerRequest, nil\n}\n}\n\n//in the udm/internal/sbi/producer/ue_context_management.go\n</code></pre> <p>In the RegistrationAmf3gppAccessProcedure function, UDM first checks whether the context has been established for that UE; if UDM has such a context, it initiates a Nudm_UECM_DeregistrationNotification to the old AMF later. UDM used the received information to create context and stored it in UDR.</p>"},{"location":"blog/UDM_introduce/#nudm_subscriberdatamanagement-sdm-service","title":"Nudm_SubscriberDataManagement (SDM) Service","text":"<p>The SDM service is used to retrieve the UE's individual subscription data relevant to the consumer's NF from the UDM. In the SDMGetAmData function, AMF gets subscription data used in registration and mobility management. In the response packet, AMF got <code>gpsis</code>, <code>subscribedUeAmbr</code>, and <code>nssai</code>.</p> <p></p> <p>The GPSI (Generic Public Subscription Identifier) is used to address a 3GPP subscription in data networks outside the realms of a 3GPP system. It contains either an External ID or an MSISDN \uff08Mobile Subscriber ISDN Number\uff09.The <code>subscribedUeAmbr</code> is The Maximum Aggregated uplink and downlink MBRs (max. bit rate) to be shared across all Non-GBR (non-guaranteed Bit Rate) QoS Flows according to the subscription of the user.</p> <p></p> <p>In the SDMGetSmfSelectData function, AMF gets subscribed S-NSSAIs (Single Network Slice Selection Assistance Information) and Data Network Names for these S-NSSAIs. AMF will use this information to select an SMF that manages the PDU Session.</p> <pre><code>func HandleInitialRegistration(ue *context.AmfUe, anType models.AccessType) error {\nue.GmmLog.Infoln(\"Handle InitialRegistration\")\n\namfSelf := context.GetSelf()\n\n// update Kgnb/Kn3iwf\nue.UpdateSecurityContext(anType)\n\n// Registration with AMF re-allocation (TS 23.502 4.2.2.2.3)\nif len(ue.SubscribedNssai) == 0 {\ngetSubscribedNssai(ue)\n}\n\nif err := handleRequestedNssai(ue, anType); err != nil {\nreturn err\n}\n\n//in the amf/internal/gmm/handler.go.\n</code></pre> <p>In the initialization of HandleInitialRegistration, AMF sends a request to the UDM to receive the UE's NSSAI (Network Slice Selection Assistance Information). After receiving subscribed NSSAI, AMF will compare it to UE's requested NSSAI. If there is a S-NSSAI that has not been subscribed before, AMF will request NSSF for Allowed NSSAI.</p> <pre><code>func handleRequestedNssai(ue *context.AmfUe, anType models.AccessType) error {\namfSelf := context.GetSelf()\n\nif ue.RegistrationRequest.RequestedNSSAI != nil {\nrequestedNssai, err := nasConvert.RequestedNssaiToModels(ue.RegistrationRequest.RequestedNSSAI)\nif err != nil {\nreturn fmt.Errorf(\"Decode failed at RequestedNSSAI[%s]\", err)\n}\n\nneedSliceSelection := false\nfor _, requestedSnssai := range requestedNssai {\nue.GmmLog.Infof(\"RequestedNssai - ServingSnssai: %+v, HomeSnssai: %+v\",\nrequestedSnssai.ServingSnssai, requestedSnssai.HomeSnssai)\nif ue.InSubscribedNssai(*requestedSnssai.ServingSnssai) {\nallowedSnssai := models.AllowedSnssai{\nAllowedSnssai: &amp;models.Snssai{\nSst: requestedSnssai.ServingSnssai.Sst,\nSd:  requestedSnssai.ServingSnssai.Sd,\n},\nMappedHomeSnssai: requestedSnssai.HomeSnssai,\n}\nif !ue.InAllowedNssai(*allowedSnssai.AllowedSnssai, anType) {\nue.AllowedNssai[anType] = append(ue.AllowedNssai[anType], allowedSnssai)\n}\n} else {\nneedSliceSelection = true\nbreak\n}\n}\n\nif needSliceSelection {\nif ue.NssfUri == \"\" {\nfor {\nerr := consumer.SearchNssfNSSelectionInstance(ue, amfSelf.NrfUri, models.NfType_NSSF, models.NfType_AMF, nil)\nif err != nil {\nue.GmmLog.Errorf(\"AMF can not select an NSSF Instance by NRF[Error: %+v]\", err)\ntime.Sleep(2 * time.Second)\n} else {\nbreak\n}\n}\n}\n\n// Step 4\nproblemDetails, err := consumer.NSSelectionGetForRegistration(ue, requestedNssai)\nif problemDetails != nil {\nue.GmmLog.Errorf(\"NSSelection Get Failed Problem[%+v]\", problemDetails)\ngmm_message.SendRegistrationReject(ue.RanUe[anType], nasMessage.Cause5GMMProtocolErrorUnspecified, \"\")\nreturn fmt.Errorf(\"Handle Requested Nssai of UE failed\")\n} else if err != nil {\nue.GmmLog.Errorf(\"NSSelection Get Error[%+v]\", err)\ngmm_message.SendRegistrationReject(ue.RanUe[anType], nasMessage.Cause5GMMProtocolErrorUnspecified, \"\")\nreturn fmt.Errorf(\"Handle Requested Nssai of UE failed\")\n}\n\n//in the amf/internal/gmm/handler.go.\n</code></pre> <pre><code>if param.SliceInfoRequestForRegistration.RequestedNssai != nil &amp;&amp;\nlen(param.SliceInfoRequestForRegistration.RequestedNssai) != 0 {\n// Requested NSSAI is provided\n// Verify which S-NSSAI(s) in the Requested NSSAI are permitted based on comparing the Subscribed S-NSSAI(s)\nif param.Tai != nil &amp;&amp;\n!util.CheckSupportedNssaiInPlmn(param.SliceInfoRequestForRegistration.RequestedNssai, *param.Tai.PlmnId) {\n// Return ProblemDetails indicating S-NSSAI is not supported\n// TODO: Based on TS 23.501 V15.2.0, if the Requested NSSAI includes an S-NSSAI that is not valid in the\n//       Serving PLMN, the NSSF may derive the Configured NSSAI for Serving PLMN\n*problemDetails = models.ProblemDetails{\nTitle:  util.UNSUPPORTED_RESOURCE,\nStatus: http.StatusForbidden,\nDetail: \"S-NSSAI in Requested NSSAI is not supported in PLMN\",\nCause:  \"SNSSAI_NOT_SUPPORTED\",\n}\n\nstatus = http.StatusForbidden\nreturn status\n}\n\n// Check if any Requested S-NSSAIs is present in Subscribed S-NSSAIs\ncheckIfRequestAllowed := false\n\nfor _, requestedSnssai := range param.SliceInfoRequestForRegistration.RequestedNssai {\nif param.Tai != nil &amp;&amp; !util.CheckSupportedSnssaiInTa(requestedSnssai, *param.Tai) {\n// Requested S-NSSAI does not supported in UE's current TA\n// Add it to Rejected NSSAI in TA\nauthorizedNetworkSliceInfo.RejectedNssaiInTa = append(\nauthorizedNetworkSliceInfo.RejectedNssaiInTa,\nrequestedSnssai)\ncontinue\n}\n\nvar mappingOfRequestedSnssai models.Snssai\n// TODO: Compared with Restricted S-NSSAI list in configuration under roaming scenario\nif param.HomePlmnId != nil &amp;&amp; !util.CheckStandardSnssai(requestedSnssai) {\n// Standard S-NSSAIs are supported to be commonly decided by all roaming partners\n// Only non-standard S-NSSAIs are required to find mappings\ntargetMapping, found := util.FindMappingWithServingSnssai(requestedSnssai,\nparam.SliceInfoRequestForRegistration.MappingOfNssai)\n\nif !found {\n// No mapping of Requested S-NSSAI to HPLMN S-NSSAI is provided by UE\n// TODO: Search for local configuration if there is no provided mapping from UE, and update UE's\n//       Configured NSSAI\ncheckInvalidRequestedNssai = true\nauthorizedNetworkSliceInfo.RejectedNssaiInPlmn = append(\nauthorizedNetworkSliceInfo.RejectedNssaiInPlmn,\nrequestedSnssai)\ncontinue\n} else {\n// TODO: Check if mappings of S-NSSAIs are correct\n//       If not, update UE's Configured NSSAI\nmappingOfRequestedSnssai = *targetMapping.HomeSnssai\n}\n} else {\nmappingOfRequestedSnssai = requestedSnssai\n}\n\nhitSubscription := false\nfor _, subscribedSnssai := range param.SliceInfoRequestForRegistration.SubscribedNssai {\nif mappingOfRequestedSnssai == *subscribedSnssai.SubscribedSnssai {\n// Requested S-NSSAI matches one of Subscribed S-NSSAI\n// Add it to Allowed NSSAI list\nhitSubscription = true\n\nvar allowedSnssaiElement models.AllowedSnssai\nallowedSnssaiElement.AllowedSnssai = new(models.Snssai)\n*allowedSnssaiElement.AllowedSnssai = requestedSnssai\nnsiInformationList := util.GetNsiInformationListFromConfig(requestedSnssai)\nif nsiInformationList != nil {\n// TODO: `NsiInformationList` should be slice in `AllowedSnssai` instead of pointer of slice\nallowedSnssaiElement.NsiInformationList = append(\nallowedSnssaiElement.NsiInformationList,\nnsiInformationList...)\n}\nif param.HomePlmnId != nil &amp;&amp; !util.CheckStandardSnssai(requestedSnssai) {\nallowedSnssaiElement.MappedHomeSnssai = new(models.Snssai)\n*allowedSnssaiElement.MappedHomeSnssai = *subscribedSnssai.SubscribedSnssai\n}\n\n// Default Access Type is set to 3GPP Access if no TAI is provided\n// TODO: Depend on operator implementation, it may also return S-NSSAIs in all valid Access Type if\n//       UE's Access Type could not be identified\nvar accessType models.AccessType = models.AccessType__3_GPP_ACCESS\nif param.Tai != nil {\naccessType = util.GetAccessTypeFromConfig(*param.Tai)\n}\n\nutil.AddAllowedSnssai(allowedSnssaiElement, accessType, authorizedNetworkSliceInfo)\n\ncheckIfRequestAllowed = true\nbreak\n}\n}\n\nif !hitSubscription {\n// Requested S-NSSAI does not match any Subscribed S-NSSAI\n// Add it to Rejected NSSAI in PLMN\ncheckInvalidRequestedNssai = true\nauthorizedNetworkSliceInfo.RejectedNssaiInPlmn = append(\nauthorizedNetworkSliceInfo.RejectedNssaiInPlmn,\nrequestedSnssai)\n}\n}\n\nif !checkIfRequestAllowed {\n// No S-NSSAI from Requested NSSAI is present in Subscribed S-NSSAIs\n// Subscribed S-NSSAIs marked as default are used\nuseDefaultSubscribedSnssai(param, authorizedNetworkSliceInfo)\n}\n} else {\n// No Requested NSSAI is provided\n// Subscribed S-NSSAIs marked as default are used\ncheckInvalidRequestedNssai = true\nuseDefaultSubscribedSnssai(param, authorizedNetworkSliceInfo)\n}\n\n//in the nssf/internal/sbi/producer/nsselection_for_registration.go, nsselectionForRegistration funcion.\n</code></pre> <p>If NSSF needs to select S-NSSAI, it first finds the mapping of requested NSSAI to configured NSSAI for the HPLMN and converts requested S-NSSAI to S-NSSAI in configured NSSAI for the HPLMN. Then compare these S-NSSAIs with Subscribed S-NSSAIs; if NSSF find one match, set it as <code>AllowedSnssai</code>. If NSSF can't find such a mapping or no S-NSSAI in the mapping matches subscribed S-NSSAIs, it will use default subscribed S-NSSAIs.</p>"},{"location":"blog/UDM_introduce/#reference","title":"Reference","text":"<ul> <li>3GPP TS29.503 v15.2.1</li> <li>3GPP TS23.502 v15.2.0</li> <li>3GPP TS23.501 v15.2.0</li> <li>3GPP TS33.501 v15.2.0</li> <li>free5GC v3.3.0</li> </ul>"},{"location":"blog/UDM_introduce/#about","title":"About","text":"<p>Hello! My name is \u5f35\u54f2\u777f, and my current research topic is ATSSS (Access Traffic Steering, Switching and Splitting), I will continue to write articles related to 5G networks in the future. If you find any mistakes in my articles or have any topics you want to know about, please contact me.</p> <ul> <li>Linkedln</li> </ul>"},{"location":"blog/network_slice/","title":"How to deploy a free5GC network slice on OpenStack","text":"<p>Note</p> <p>Author: Daniel Hsieh Date: 2023/7/26</p>"},{"location":"blog/network_slice/#whats-network-slicing","title":"What's Network Slicing","text":"<p>Network slicing allows for the creation of multiple logical, isolated, and independent virtual networks that can coexist within a shared physical infrastructure. Each network slice provides dedicated and customized network resources to meet the specific requirements of different services The main elements of a network slice include:</p> <ul> <li> <p>Virtualized Network Functions (VNFs): Each network slice can include a set of virtualized network functions that provide specific network capabilities and services. These VNFs can include functions like routing, switching, firewalling, load balancing, or any other network service required by the slice.</p> </li> <li> <p>Isolation and Resource Allocation: Network slicing ensures the isolation of resources between slices, preventing interference and conflicts. It allows for the allocation of dedicated and optimized resources such as bandwidth, processing power, and storage to each slice based on its specific needs.</p> </li> <li> <p>Orchestration and Management: Network slice orchestration involves the creation, provisioning, and management of network slices. It involves configuring the appropriate VNFs, assigning resources, and establishing connectivity between the different components of a slice. </p> </li> </ul> <p></p> <p>NFV Enabling Network Slicing for 5G</p> <p>Take Figure 1 as an example. The first slice is designed for mobile devices such as smartphones. Such slice requires a huge diversity of VNFs, and virtual links with high speed and low latency to support the broadband service of smartphones. In 5G network, Those slices are referred to as eMBB (enhanced mobile broadband) slices.</p> <p>The second slice is designed for autonomous driving. In such scenario, extremely low latency and high reliability are paramount to ensure the vehicles' operability, smoothness and safety. To achieve low latency, some of the NFs should be deployed close to the access node,i.e. on edge cloud. To achieve high reliability, a NF should have multiple instances on available physical resources to make the slice more fault tolerant. Such slice is referred to as URLLC (Ultra-Reliable Low-Latency Communications) slice. </p> <p>The third slice is designed for massive IoT. IoT devices are expected to not move and send very small amount of data intermittently. Due to the nature of such devices, functions that handle mobiltiy and always-on connections are not needed. Such slices are referred to as mIoT (massive IoT) slices.</p>"},{"location":"blog/network_slice/#mano-architecture","title":"MANO Architecture","text":"<p>In this article, we utilize MANO network function virtualization (NFV) architecture to deploy virtual network function (VNF). It plays the role of creating, deploying, and managing VNFs. MANO consists of three main functional components: NFV Orchestrator (NFVO), Virtualized Infrastructure Manager (VIM), and Virtual Network Function Manager (VNFM).</p> <p></p> <p>NFV MANO Architecture</p> <ul> <li> <p>NFVO manages the underlying resource by coordinating VIM and VNFM. It handles tasks such as receiving requests, service instantiation, scaling, termination, and monitoring.</p> </li> <li> <p>VNFM manages the lifecycle of VNF instances. It interacts with the VIM to instantiate, configure, monitor, and terminate VNF instances.</p> </li> <li> <p>VIM is responsible for managing the underlying virtualized infrastructure that hosts the VNFs. It abstracts the physical resources, such as compute, storage, and networking, and provides a unified view to the NFVO. The VIM handles tasks like resource allocation, performance monitoring, fault management, and virtualization management.</p> </li> </ul> <p>For VIM, we use OpenStack, an open-source software that provides IaaS, to utilize the physical resources. For VNFM and NFVO, we use Tacker, a service component of OpenStack, to manage VNFs.</p>"},{"location":"blog/network_slice/#openstack","title":"OpenStack","text":"<p>OpenStack is an open-source cloud computing platform that provides a set of software tools for building and managing customized clouds. OpenStack offers a infrastructure-as-a-service (IaaS) solution, enabling organizations to create and manage virtualized resources in a cloud environment. It is designed to be modular and consists of various components that work together to deliver a comprehensive cloud computing platform. Some of the key components include:</p> <ul> <li> <p>Nova: Nova is the computing component of OpenStack and serves as the main compute engine. It manages the creation, scheduling, and management of virtual machines (VMs) and provides APIs for controlling and interacting with the compute resources.</p> </li> <li> <p>Cinder: Cinder is the block storage component of OpenStack. It provides persistent storage for virtual machines. With Cinder, users can create and manage volumes that can be attached to instances, allowing for flexible and scalable storage options.</p> </li> <li> <p>Neutron: Neutron is the networking component of OpenStack. It provides a networking-as-a-service (NaaS) solution, allowing users to define and manage network resources. Neutron supports virtual LANs, software-defined networking (SDN), and network function virtualization (NFV), etc.</p> </li> <li> <p>Keystone: Keystone is the identity service component of OpenStack. It provides authentication and authorization services, enabling users to securely access and manage resources within the cloud. Keystone supports multiple authentication mechanisms, including username/password, token-based, and external identity providers.</p> </li> <li> <p>Horizon: Horizon is the web-based dashboard for OpenStack. It provides a user-friendly interface for managing and monitoring the cloud infrastructure. With Horizon, users can perform various tasks, such as launching instances, managing storage resources, and configuring networking options.</p> </li> </ul> <p></p> <p>OpenStack Architecture</p> <p>OpenStack is highly flexible and customizable, allowing organizations to tailor the cloud infrastructure to their specific needs. It supports multiple hypervisors, including KVM, VMware, and Hyper-V.</p>"},{"location":"blog/network_slice/#tacker","title":"Tacker","text":"<p>To enable NFV, we need another service component of OpenStack called Tacker. Tacker is designed to simplify the deployment and lifecycle management of VNFs and network service functions (NSFs) in a cloud infrastructure. It leverages OpenStack's existing components, such as Nova, Neutron, and Heat, to provide a comprehensive solution for network service orchestration. Tacker provides several key features and functionalities:</p> <ul> <li> <p>Service Templates: Tacker uses service templates to define the composition and behavior of network services. These templates describe the VNFs and NSFs involved, their interconnections, resource requirements, etc. Service templates are written using the TOSCA (Topology and Orchestration Specification for Cloud Applications) standard.</p> </li> <li> <p>Lifecycle Management: Tacker automates the entire lifecycle of network services, including provisioning, scaling, healing, and termination. It leverages Heat, OpenStack's orchestration service, to manage the underlying infrastructure resources required by the services and handle dynamic scaling of VNFs based on traffic demands.</p> </li> <li> <p>VNF Manager: Tacker includes a VNF Manager component responsible for managing the lifecycle of VNFs. It interacts with OpenStack's compute and networking services, to instantiate and manage VNF instances.</p> </li> <li> <p>Multi-VIM Support: Tacker supports multiple virtual infrastructure managers  to accommodate different cloud platforms and environments. It can interact with OpenStack, VMware vSphere and Kubernetes and so on, enabling operators to deploy network services across heterogeneous infrastructure environments.</p> </li> </ul> <p></p> <p>Tacker Architecture</p>"},{"location":"blog/network_slice/#deploy-a-free5gc-network-slice","title":"Deploy a free5GC Network Slice","text":"<ol> <li> <p>In our implementation, we install OpenStack and Tacker on two different virtual machines for resource utilization reasons, but in fact, they can be installed on the same virtual machine. </p> </li> <li> <p>we need to install OpenStack on a virtual machine. Specific details and corresponding compatibility can be found on OpenStack official website. Using devstack scripts for installation enables operators to customize the environment based on their needs, such as extra plugins (softwares that extends the functionality of OpenStack environment) and overcommit (allows deploying NFs that require more resource than existing physical resourcce) functionality. Upon completion, a web UI enabled by Horizon can be used  to access and operate on your own personalized OpenStack cloud. </p> </li> <li> <p>Install Tacker on another virtual machine, which requires four OpenStack service components, Keystone, Mistral, Barbican and Horizon. Once the installation is completed, we can register our OpenStack VIM on Tacker using <code>openstack vim register</code>command.</p> </li> <li> <p>Create two instances that will be used as images (one for control plane VNFs, one for UPF) for the VNFs that we will create. Then, <code>ssh</code> into those instances to set up the configurations for the VNFs, such as, installing required packages (go language, mongodb, libtool, etc.) and <code>git clone</code> free5GC source code. Once all the configurations are done, use OpenStack dashboard to take snapshots of these instances, which will be used as the images for VNFs. </p> </li> <li> <p>Import all the VNF descriptors (VNFD) of the VNFs we need by using <code>openstack vnf descriptor create</code> command. VNFDs should be written in accordance with TOSCA format. TOSCA format allows you to define the virtual links (a virtual network VNFs will be running in) and virtual deployment unit (operation unit of a VNF).      Below is an example of UPF VNFD: <pre><code>tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0\ndescription: description\nnode_types:\ntosca.nodes.nfv.VNF11:\nrequirements:\n- virtualLink1:\ntype: tosca.nodes.nfv.VL\nrequired: true\nmetadata:\ntemplate_name: free5GCSetup\ntopology_template:\nsubstitution_mappings:\nnode_type: tosca.nodes.nfv.VNF11\nnode_templates:\nVDU1:\ntype: tosca.nodes.nfv.VDU.Tacker\nproperties:\nname: free5gc-upf1-VNF\nimage: stage3-up\nflavor: free5gc\navailability_zone: nova\nmgmt_driver: noop\nkey_name: free5gc\nuser_data_format: RAW\nuser_data: |\n#!/bin/sh\ncd /home/ubuntu/free5gc/src/upf/build \ncat &gt; config/upfcfg.yaml &lt;&lt;- EOM\ninfo:\nversion: 1.0.0\ndescription: UPF configuration\n\nconfiguration:\n# debugLevel: panic|fatal|error|warn|info|debug|trace\ndebugLevel: info\n\npfcp:\n- addr: 192.168.2.111\n\ngtpu:\n- addr: 192.168.2.111\n# [optional] gtpu.name\n# - name: upf.5gc.nctu.me\n# [optional] gtpu.ifname\n# - ifname: gtpif\n\napn_list:\n- apn: internet\ncidr: 60.60.0.0/24\n# [optional] apn_list[*].natifname\n# natifname: eth0\nEOM\n#sudo ./bin/free5gc-upfd -f config/upfcfg.yaml\n\nCP1:\ntype: tosca.nodes.nfv.CP.Tacker\nproperties:\nip_address: 192.168.2.111\nmanagement: true\nrequirements:\n- virtualLink:\nnode: VL1\n- virtualBinding:\nnode: VDU1\nVL1:\ntype: tosca.nodes.nfv.VL\nproperties:\nnetwork_name: 5GC\nvendor: Tacker\nFIP1:\ntype: tosca.nodes.network.FloatingIP\nproperties:\nfloating_network: public\nfloating_ip_address: 172.24.4.111\nrequirements:\n- link:\nnode: CP1\n</code></pre></p> </li> <li>Import the network service descriptor (NSD) using <code>openstack ns descriptor create</code> command. The NSD should also be written in accordance with TOSCA format. Once all the VNFDs and NSD are all successfully imported, we can use <code>openstack ns create</code> to deploy the network slice. The VNFs specified in the NSD will also be instantiated along with the network slice. Their instances can be viewed on OpenStack dashboard enabled by Horizon or just use <code>openstack vnf list</code> to check the status of the VNFs.     Below is an example of NSD <pre><code>tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0\ndescription: Import Common Slice VNFDs (already on-boarded)\nimports:\n- mongo\n- nrf\n- amf\n- smf\n- udr\n- pcf\n- udm\n- nssf\n- ausf\ntopology_template:\nnode_templates:\nVNF0:\ntype: tosca.nodes.nfv.VNF0\nVNF1:\ntype: tosca.nodes.nfv.VNF1\nVNF2:\ntype: tosca.nodes.nfv.VNF2\nVNF3:\ntype: tosca.nodes.nfv.VNF3\nVNF4:\ntype: tosca.nodes.nfv.VNF4\nVNF5:\ntype: tosca.nodes.nfv.VNF5\nVNF6:\ntype: tosca.nodes.nfv.VNF6\nVNF7:\ntype: tosca.nodes.nfv.VNF7\nVNF8:\ntype: tosca.nodes.nfv.VNF8\n</code></pre></li> <li><code>ssh</code> into the VNF instances to make the necessary configuration for each VNF and start the free5GC VNF.</li> <li>Voila! Now we have a fully functional free5GC network slice.</li> </ol> <p>There are many other ways to set up a network slice. For example, we can deploy VNFs of the same network slice on different VIMs, or we can deploy all the network slices on the same VIM, as long as it is specified in the VNFDs. </p>"},{"location":"blog/network_slice/#about","title":"About","text":"<p>Hi, my name is Daniel Hsieh. I am a CS major graduate student. My research field is network slicing. If there are any questions about the article, please feel free to contact.</p> <ul> <li>email: e657shai@gmail.com</li> </ul>"},{"location":"blog/network_slice/#reference","title":"Reference","text":"<ul> <li> <p>https://www.acecloudhosting.com/blog/openstack-the-catalyst-of-the-public-cloud-market/</p> </li> <li> <p>https://telcocloudbridge.com/blog/a-beginners-guide-to-nfv-management-orchestration-mano/</p> </li> <li> <p>https://wiki.openstack.org/wiki/Tacker</p> </li> <li> <p>B. Chatras, U. S. Tsang Kwong and N. Bihannic, \"NFV enabling network slicing for 5G,\" 2017 20th Conference on Innovations in Clouds, Internet and Networks (ICIN), Paris, France, 2017, pp. 219-225, doi: 10.1109/ICIN.2017.7899415.</p> </li> </ul>"},{"location":"guide/","title":"Index","text":""},{"location":"guide/#user-guide","title":"User Guide","text":""},{"location":"guide/#information","title":"Information","text":"<ul> <li>Hardware tested</li> <li>Supported features</li> </ul>"},{"location":"guide/#roadmap","title":"Roadmap","text":"<p>Here are the features on the roadmap. These items are planned to be supported in the near future:</p> <ul> <li>OAuth on SBA</li> <li>Charging Function (CHF)</li> <li>Network Exposure Function (NEF)</li> </ul>"},{"location":"guide/#free5gc-installation-guide","title":"free5GC Installation Guide","text":"<p>For people who are not familiar with virtual machines and Linux installation, here are some example demonstrations:</p> <ul> <li>Creating a Ubuntu VM using VirtualBox</li> <li>Creating and Configuring a free5GC VM</li> <li>Installing and Testing free5GC Core Network</li> <li>Installing a UE/RAN Simulator</li> <li>free5GC Simple Apps</li> <li>All of tutorial videos are available at our Youtube Channel EN/ZH-TW</li> <li>Environment setup of multiple SMF, DNN, and UPF</li> </ul>"},{"location":"guide/#configuration","title":"Configuration","text":"<ul> <li>Environment</li> <li>Basic</li> <li>SMF</li> <li>Webconsole</li> <li>Select UPF based on S-NSSAI</li> <li>Select nearby UPF according to the connected gNodeB</li> <li>ULCL</li> <li>Netns5g - A free5gc and UERANSIM deployment using Linux network namespaces</li> </ul>"},{"location":"guide/#deployment","title":"Deployment","text":"<p>For Container deployment:</p> <ul> <li>free5GC Compose (Docker Compose)</li> <li>Towards5gs-helm (Kubernetes)</li> </ul>"},{"location":"guide/#others","title":"Others","text":"<ul> <li>Release Note</li> <li>Trouble Shooting</li> <li>Appendix</li> </ul>"},{"location":"guide/1-vm-en/","title":"1 vm en","text":""},{"location":"guide/1-vm-en/#ubuntu-virtual-machine-installation-demo","title":"Ubuntu Virtual Machine Installation Demo","text":"<p>In this demo, we will</p> <ul> <li>install VirtualBox</li> <li>create a Ubuntu Server VM using VirtualBox</li> <li>use SSH to connect to the Ubuntu VM to install free5GC stage 3</li> <li>Update and upgrade Ubuntu</li> </ul>"},{"location":"guide/1-vm-en/#1-install-virtualbox","title":"1. Install VirtualBox","text":"<p>Search <code>virtualbox download</code>, or visit virtualbox.org to download and install VirtualBox (currently 6.1.18) for your operation system. </p> <p>Once installed VirtualBox, launch and see if you have something like this: </p>"},{"location":"guide/1-vm-en/#2-download-ubuntu-server","title":"2. Download Ubuntu Server","text":"<p>Search <code>ubuntu server download</code> on the web and download the latest Ubuntu Server LTS, or visit ubuntu.com, choose Manual Installation Option to download the <code>.iso</code> file (currently 20.04.2 LTS) </p> <p>You should have downloaded a <code>.iso image</code> file with name like <code>ubuntu-20.04.1-live-server-amd64.iso</code>, probably in your download directory. </p>"},{"location":"guide/1-vm-en/#3-create-a-ubuntu-server-vm","title":"3. Create a Ubuntu Server VM","text":"<p>Launch VirtualBox and create your first Ubuntu VM using the downloaded .iso image file. We use Ubuntu Server instead of Ubuntu Desktop because we only need a basic server machine without too many unnecessary functionalities. The resulting overhead to your host machine is smaller, and the VM starts up faster too.</p> <p>Tips</p> <ul> <li>Name the first VM using a generic name as ubuntu, <code>ubuntu-server</code>, or <code>ubuntu-20.04</code>.</li> <li>You can pick 1 or 2 (or more) CPUs, and about 2048M memory, although you can change them later.</li> <li>In addition to the default NAT network interface, also add another \u201cHost-only\u201d network interface.</li> </ul> <p>Refer to the videos Creating VM, Setting up VM.</p>"},{"location":"guide/1-vm-en/#31-start-installing-ubuntu","title":"3.1 Start Installing Ubuntu","text":"<p>Some notes about installing Ubuntu:</p> <ul> <li>It is recommended that you choose short username and password for ease of typing later</li> <li>Not choosing LVM will make it a little bit easier later if you want to extend your disk space</li> <li>Choose to include SSH Server</li> <li>Let security update complete</li> </ul> <p>Refer to videos Install Ubuntu 1, Install Ubuntu 2.</p>"},{"location":"guide/1-vm-en/#32-log-in-into-ubuntu","title":"3.2 Log in into Ubuntu","text":"<p>Reboot after Ubuntu installation complete; wait a little bit for some initialization steps complete. Then log in with your username and password. </p> <p>First try the <code>ifconfig</code> command\uff1a <pre><code>ubuntu@ubuntu:~$ ifconfig\nCommand 'ifconfig' not found, but can be installed with:\nsudo apt install net-tools\nubuntu@ubuntu:~$\n</code></pre></p> <p>If some messages like above show, it means <code>ifconfig</code> has not been installed yet. (<code>ifconfig</code> is no longer installed by defaults in newer Ubuntu, and is replaced by more versatile ip command, but we will use it here for simplicity).</p> <p>Follow its suggestion and install <code>ifconfig</code>: <pre><code>ubuntu@ubuntu:~$ sudo apt install net-tools\n</code></pre> Below shows the installation result: </p> <p>Run <code>ifconfig</code> again to check the network interfaces: </p> <p>Your display may look different, but take notes about the IP address of the Host-only interface card. The example above shows <code>192.168.56.101</code>. You can SSH from your host machine into this Ubuntu VM using the IP later. (Another IP address, <code>10.0.2.15</code> is the IP address of the NAT interface card, the apps in your host machine cannot access it).</p> <p>Finally check if the VM has internet access: <pre><code>ubuntu@ubuntu:~$ ping google.com\n</code></pre></p> <p></p> <p>Refer to the first part of the video Ping, SSH, and Upgrade.</p>"},{"location":"guide/1-vm-en/#4-connect-to-the-ubuntu-vm-using-ssh","title":"4. Connect to the Ubuntu VM using SSH","text":"<p>Launch your favorite SSH client from the host machine. Some operation systems (Mac, Ubuntu, some Windows) have pre-installed SSH clients. If you are using Windows, you can also download third-party SSH clients. For example, search \u201cwindows ssh download\u201d on the web.</p> <p>The benefit of using SSH is that you can easily copy and paste commands from your machine to Ubuntu VM for execution, and vice versa. You can also create multiple SSH connections with the Ubuntu VM for control and monitoring at the same time.</p> <p>Below shows some examples on a Mac host machine. Suppose the Host-only network IP is <code>192.168.56.101</code>, and tue username is ubuntu: <pre><code>ssh 192.168.56.101 -l ubuntu\n</code></pre> The first time you connect to the VM, your SSH client may show some message asking you for confirmation. Enter yes: </p> <p>Tips</p> <p>If somehow SSH shows some warning messages telling you the machine has potential security risk, you may have to remove an entry in the file <code>&lt;your home directory&gt;/.ssh/known_hosts</code> related the the IP address.</p> <p>If you log in successfully, you will enter a command line interface: </p> <p>Repeat the basic commands such as <code>ping</code>, <code>ifconfig</code> to see if the VM is working properly. If so, we can access the Ubuntu VM \u201cremotely\u201d from now on.</p> <p> </p>"},{"location":"guide/1-vm-en/#5-update-and-upgrade-your-ubuntu","title":"5. Update and Upgrade your Ubuntu","text":"<p>Let also update and upgrade the Ubuntu VM right now to make sure it is up-to-date with proper security updates. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p>"},{"location":"guide/2-config-vm-en/","title":"2 config vm en","text":""},{"location":"guide/2-config-vm-en/#creating-a-free5gc-vm-and-setting-up-network","title":"Creating a free5GC VM and Setting up Network","text":"<p>In this demo we will exercise:</p> <ul> <li>Cloning an existing VM, and install free5GC on it</li> <li>Setting up the networking for the free5GC VM</li> </ul> <p>Tips</p> <p>Refer to video Clone VM and Change IP.</p>"},{"location":"guide/2-config-vm-en/#1-check-up-an-existing-vm-for-cloning","title":"1. Check up an existing VM for Cloning","text":"<p>Launch VirtualBox, and make sure the Ubuntu VM (ubuntu) we created before can boot up, then:</p> <ul> <li>Log in into the VM using SSH from the host machine, and check if the VM has internet access</li> <li>Make sure you have done <code>sudo apt update</code> and <code>sudo apt upgrade</code> (or you can do it again)</li> <li>Shutdown the VM. You can:</li> <li>use command <code>sudo shutdown -P now</code>, or</li> <li>click the \u201cClose Window\u201d of the Ubuntu VM terminal and choose the middle option (better not force to turn off the machine power)</li> <li>later if you just want to reboot, enter <code>sudo shutdown -r now</code></li> </ul>"},{"location":"guide/2-config-vm-en/#2-create-a-free5gc-vm","title":"2. Create a free5GC VM","text":"<p>First let\u2019s clone a new VM:</p> <ul> <li>Select an existing VM (ubuntu) and click the buttons on the right: / Snapshopts / Clone.</li> <li>Name the new VM <code>free5gc</code>.</li> <li>The MAC address rule: Create new MAC addresses for all network cards.</li> <li>Choose the Link cloning option (or you can also choose to complete clone the VM if you like).</li> </ul> <p>After the new VM is created:</p> <ul> <li>Start up the new free5gc VM, and use the same username and password to log in.</li> <li>In the Ubuntu terminal, issue <code>ping</code> and <code>ifconfig</code> again to make sure it has internet access, and also make note of the IP address of the Host-only network interface.<ul> <li>for example the IP could still be <code>192.168.56.101</code>, and the interface name is <code>enp0s8</code>.</li> </ul> </li> <li>Log in into free5gc VM using SSH, and make sure all things working properly.</li> </ul>"},{"location":"guide/2-config-vm-en/#3-change-hostname","title":"3. Change hostname","text":"<p>The cloned free5gc VM still has host name <code>ubuntu</code> (or the name you gave it in the original VM). Let\u2019s rename the VM to <code>free5gc</code>. You can do this by editing the file <code>/etc/hostname</code> (using <code>vi</code> or <code>nano</code>): <pre><code>sudo nano /etc/hostname\n# or \nsudo vi /etc/hostname\n</code></pre> In the file, change ubuntu into <code>free5gc</code>\u3002If you are using nano \uff0cyou can press <code>Ctrl-O</code> to save the file, then <code>Ctrl-X</code> to exit.</p> <p>Let\u2019s also change the file <code>/etc/hosts</code> by replacing the ubuntu inside into <code>free5gc</code>: <pre><code>sudo nano /etc/hosts\n</code></pre></p> <p>New content of the file <code>/etc/hosts</code> looks like this: <pre><code>127.0.0.1 localhost\n127.0.1.1 free5gc\n...\n</code></pre></p> <p>The changes will take effect after next reboot.</p>"},{"location":"guide/2-config-vm-en/#4-setting-static-ip-address","title":"4. Setting Static IP Address","text":"<p>The Host-only network interface, by default, gets its IP address through DHCP. The cloned free5gc VM seems to have trouble obtaining new IP address. We can change the host-only interface to use static IP address instead, which can save a lot of trouble later.</p> <p>Here let\u2019s fix the static IP address as <code>192.168.56.101</code>: <pre><code>$ cd /etc/netplan\n$ ls\n00-installer-config.yaml\n$ cat 00-installer-config.yaml\n</code></pre> The original content of the file <code>00-installer-config.yaml</code> looks like: <pre><code># This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    enp0s3:\n      dhcp4: true\n    enp0s8:\n      dhcp4: true\n  version: 2\n</code></pre> meaning the VM has two network interfaces. Using <code>ifconfig</code> we know that <code>enp0s8</code> is the name of the Host-only network interface. We can edit the file: <pre><code>sudo nano 00-installer-config.yaml\n</code></pre> and change it into: <pre><code># This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    enp0s3:\n      dhcp4: true\n    enp0s8:\n      dhcp4: no\n      addresses: [192.168.56.101/24]\n  version: 2\n</code></pre> First check if the new content is correct: <pre><code>sudo netplan try\n</code></pre> Press enter to exit, if successful. The apply tne new interface setting: <pre><code>sudo netplan apply\n</code></pre> Run <code>ifconfig</code> to see if the network setting has been changed correctly: <pre><code>enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255\n        inet6 fe80::a00:27ff:fec4:254f  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:c4:25:4f  txqueuelen 1000  (Ethernet)\n        RX packets 2  bytes 1180 (1.1 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 18  bytes 1894 (1.8 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nenp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.56.101  netmask 255.255.255.0  broadcast 192.168.56.255\n        inet6 fe80::a00:27ff:fe7e:ada6  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:7e:ad:a6  txqueuelen 1000  (Ethernet)\n        RX packets 8420  bytes 531867 (531.8 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10887  bytes 823487 (823.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 6621  bytes 596035 (596.0 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 6621  bytes 596035 (596.0 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> We can also check the routing table, just to have a grasp of what is going on regarding the network setting: <pre><code>$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 enp0s3\n10.0.2.0        0.0.0.0         255.255.255.0   U     0      0        0 enp0s3\n10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 enp0s3\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre></p> <p>For the display above, we learn that the Host-only network <code>192.168.56.0/24</code> does not have internet access by itself (even though we can access it using SSH from the host machine). Internet access is through the NAT network <code>10.0.2.0/24</code>, with the gateway being <code>10.0.2.2</code> (provided by VirtualBox). Now we can SSH into free5gc VM using <code>192.168.56.101</code>: <pre><code>ssh 192.168.56.101 -l ubuntu\n</code></pre> This is also how we interact with free5gc VM from now on.</p>"},{"location":"guide/3-install-free5gc/","title":"3 install free5gc","text":""},{"location":"guide/3-install-free5gc/#installation","title":"Installation","text":""},{"location":"guide/3-install-free5gc/#a-prerequisites","title":"A. Prerequisites","text":"<ol> <li> <p>Linux Kernel Version</p> <ul> <li>In order to use the UPF element, you must use the <code>5.0.0-23-generic</code> or <code>5.4.x</code> version of the Linux kernel.  free5gc uses the gtp5g kernel module, which has been tested and compiled against that kernel versions only. If you installed Ubuntu 20.04, the version looks like 5.4.x. To determine the version of the Linux kernel you are using:</li> </ul> <pre><code>    $ uname -r\n    5.4.0-65-generic\n</code></pre> </li> </ol> <p>You will not be able to run most of the tests in Test section unless you deploy a UPF.</p> <ol> <li> <p>Golang Version</p> <ul> <li>As noted above, free5gc is built and tested with Go 1.17.8</li> <li>To check the version of Go on your system, from a command prompt:</li> </ul> <pre><code>    go version\n</code></pre> <ul> <li>If another version of Go is installed, remove the existing version and install Go 1.17.8:</li> </ul> <pre><code>    # this assumes your current version of Go is in the default location\nsudo rm -rf /usr/local/go\n    wget https://dl.google.com/go/go1.17.8.linux-amd64.tar.gz\n    sudo tar -C /usr/local -zxvf go1.17.8.linux-amd64.tar.gz\n</code></pre> <ul> <li>If Go is not installed on your system:</li> </ul> <pre><code>    wget https://dl.google.com/go/go1.17.8.linux-amd64.tar.gz\n    sudo tar -C /usr/local -zxvf go1.17.8.linux-amd64.tar.gz\n    mkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\n    echo 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\n    echo 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\n    echo 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\n    source ~/.bashrc\n</code></pre> <ul> <li>Further information and installation instructions for <code>golang</code> are available at the official golang site.</li> </ul> </li> <li> <p>Control-plane Supporting Packages</p> </li> </ol> <pre><code>sudo apt -y update\nsudo apt -y install mongodb wget git\nsudo systemctl start mongodb\n</code></pre> <ul> <li> <p>WARNING: MongoDB 5.0+ requires a CPU with AVX support. Or downgrade your MongoDB to 4.4</p> <ul> <li> <p>see https://www.mongodb.com/community/forums/t/mongodb-5-0-cpu-intel-g4650-compatibility/116610/2</p> </li> <li> <p>see also docker-library/mongo#485 (comment)</p> </li> </ul> </li> <li> <p>User-plane Supporting Packages</p> </li> </ul> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\n</code></pre> <ol> <li>Linux Host Network Settings</li> </ol> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o &lt;dn_interface&gt; -j MASQUERADE\nsudo iptables -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1400\nsudo systemctl stop ufw\n</code></pre>"},{"location":"guide/3-install-free5gc/#b-install-control-plane-elements","title":"B. Install Control Plane Elements","text":"<ol> <li> <p>Clone the free5GC repository</p> <ul> <li>To install the latest stable build (v3.3.0):</li> </ul> <pre><code>    cd ~\n    git clone --recursive -b v3.3.0 -j `nproc` https://github.com/free5gc/free5gc.git\n    cd free5gc\n</code></pre> <ul> <li>(Alternatively) to install the latest nightly build:</li> </ul> <pre><code>    cd ~/free5gc\n    git checkout main\n    git submodule sync\n    git submodule update --init --jobs `nproc`\ngit submodule foreach git checkout main\n    git submodule foreach git pull --jobs `nproc`\n</code></pre> </li> <li> <p>Compile network function services in <code>free5gc</code></p> <ul> <li>To do so individually (e.g., AMF only):</li> </ul> <pre><code>    cd ~/free5gc\n    make amf\n</code></pre> <ul> <li>To build all network functions:</li> </ul> <pre><code>    cd ~/free5gc\n    make\n</code></pre> </li> </ol>"},{"location":"guide/3-install-free5gc/#c-install-user-plane-function-upf","title":"C. Install User Plane Function (UPF)","text":"<ol> <li>As noted above, the GTP kernel module used by the UPF requires that you use Linux kernel version <code>5.0.0-23-generic</code> or <code>5.4.x</code>.  To verify your version:</li> </ol> <pre><code>uname -r\n</code></pre> <ol> <li>Retrieve the 5G GTP-U kernel module using <code>git</code> and build it</li> </ol> <pre><code>git clone -b v0.8.1 https://github.com/free5gc/gtp5g.git\ncd gtp5g\nmake\nsudo make install\n</code></pre> <ol> <li> <p>Build the UPF (you may skip this step if you built all network functions above):</p> </li> <li> <p>to build using make:</p> </li> </ol> <pre><code>cd ~/free5gc\nmake upf\n</code></pre> <ol> <li>Customize the UPF as desired. The UPF configuration file in <code>run.sh</code> is <code>free5gc/config/upfcfg.yaml</code>.</li> </ol>"},{"location":"guide/3-install-free5gc/#d-install-webconsole","title":"D. Install WebConsole","text":"<ol> <li>Before building WebConsole, install nodejs and yarn packages first:</li> </ol> <pre><code>sudo apt remove cmdtest\nsudo apt remove yarn\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\nsudo apt-get update\nsudo apt-get install -y nodejs yarn\n</code></pre> <ol> <li> <p>Build WebConsole</p> </li> <li> <p>to build using make:</p> </li> </ol> <pre><code>cd ~/free5gc\nmake webconsole\n</code></pre> <ul> <li>(Alternatively) to build manually:</li> </ul> <pre><code>cd ~/free5gc/webconsole/frontend\nyarn install\nyarn build\nrm -rf ../public\ncp -R build ../public\ncd ..\ngo build -o bin/webconsole server.go\n</code></pre> <p>Note: 2GB or more of OS memory is recommended. WebConsole may be failed to build if memory is less then 1GB.</p>"},{"location":"guide/4-test-free5gc/","title":"4 test free5gc","text":""},{"location":"guide/4-test-free5gc/#test-free5gc","title":"Test free5GC","text":"<p>Start a Wireshark capture on any core-connected interface, applying the filter <code>'pfcp||icmp||gtp'</code>.</p> <p>In order to run the tests, first do this:</p> <pre><code>cd ~/free5gc\nmake upf\nchmod +x ./test.sh\n</code></pre> <p>The tests are all run from within <code>~/free5gc</code>.</p> <p>a. TestRegistration</p> <pre><code>./test.sh TestRegistration\n</code></pre> <p>b. TestGUTIRegistration</p> <pre><code>./test.sh TestGUTIRegistration\n</code></pre> <p>c. TestServiceRequest</p> <pre><code>./test.sh TestServiceRequest\n</code></pre> <p>d. TestXnHandover</p> <pre><code>./test.sh TestXnHandover\n</code></pre> <p>e. TestDeregistration</p> <pre><code>./test.sh TestDeregistration\n</code></pre> <p>f. TestPDUSessionReleaseRequest</p> <pre><code>./test.sh TestPDUSessionReleaseRequest\n</code></pre> <p>g. TestPaging</p> <pre><code>./test.sh TestPaging\n</code></pre> <p>h. TestN2Handover</p> <pre><code>./test.sh TestN2Handover\n</code></pre> <p>i. TestNon3GPP</p> <pre><code>./test.sh TestNon3GPP\n</code></pre> <p>j. TestReSynchronization</p> <pre><code>./test.sh TestReSynchronization\n</code></pre> <p>k. TestULCL</p> <pre><code>./test_ulcl.sh TestRequestTwoPDUSessions\n</code></pre>"},{"location":"guide/5-install-ueransim/","title":"5 install ueransim","text":""},{"location":"guide/5-install-ueransim/#installing-ueransim-a-ueran-simulator","title":"Installing UERANSIM - a UE/RAN Simulator","text":"<p>In this demo we will practice:</p> <ul> <li>Installing UERANSIM</li> <li>Configuring free5GC and UERANSIM</li> <li>Running UERANSIM against free5GC</li> </ul>"},{"location":"guide/5-install-ueransim/#1-install-ueramsim-vm","title":"1. Install ueramsim VM","text":"<p>Repeat the steps of cloning <code>free5gc</code> VM from the base VM, create a new VM for the UERANSIM simulator:</p> <ul> <li>Name the VM <code>ueransim</code>, and create new MAC addresses for all network cards.</li> <li>Make sure the VM has internet access and can log in using SSH.</li> <li>Change the hostname to <code>ueransim</code>.</li> <li>Make the Host-only network interface have static IP address <code>192.168.56.102</code>.</li> <li>Reboot the ueransim VM, as well as the free5gc VM.</li> <li>You can ping <code>192.168.56.101</code> from the ueransim VM, and also <code>ping 192.168.56.102</code> from the free5gc VM.</li> </ul>"},{"location":"guide/5-install-ueransim/#2-install-ueransim","title":"2. Install UERANSIM","text":"<p>Search \u201cueransim\u201d on the web, and get the web site. On the web site, review what the UERANSIM open-source project is about, then browse into the installation page.</p> <p>To download UERANSIM: <pre><code>cd ~\ngit clone https://github.com/aligungr/UERANSIM\ncd UERANSIM\ngit checkout 3a96298\n</code></pre></p> <p>Update and upgrade ueransim VM first: <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Install required tools: <pre><code>sudo apt install make\nsudo apt install g++\nsudo apt install libsctp-dev lksctp-tools\nsudo apt install iproute2\nsudo snap install cmake --classic\n</code></pre></p> <p>Build UERANSIM: <pre><code>cd ~/UERANSIM\nmake\n</code></pre></p>"},{"location":"guide/5-install-ueransim/#3-install-free5gc-webconsole","title":"3. Install free5GC WebConsole","text":"<p>free5GC provides a simple web tool WebConsole to help creating and managing UE registrations to be used by various 5G network functions (NF). To build WebConsole we need Node.js and Yarn.</p> <p>First SSH into free5gc (<code>192.168.56.101</code>)\uff0cand remove obsolete tools that may exists: <pre><code>sudo apt remove cmdtest\nsudo apt remove yarn\n</code></pre></p> <p>Then install <code>Node.js</code> and <code>Yarn</code>: <pre><code>curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt-get update\nsudo apt-get install -y nodejs yarn\n</code></pre></p> <p>To build WebConsole: <pre><code>cd ~/free5gc\nmake webconsole\n</code></pre></p>"},{"location":"guide/5-install-ueransim/#4-use-webconsole-to-add-an-ue","title":"4. Use WebConsole to Add an UE","text":"<p>First start up the WebConsole server: <pre><code>cd ~/free5gc/webconsole\ngo run server.go\n</code></pre></p> <p>The screen shows the port number <code>:5000</code> at the end. Open your web browser from your host machine, and enter the URL <code>http://192.168.56.101:5000</code></p> <ul> <li>On the login page, enter username <code>admin</code> and password <code>free5gc</code>.</li> <li>Once logged in, widen the page until you see \u201cSubscribers\u201d on the left-hand side column.</li> <li>Choose <code>Subscribers</code> and create a new data:<ul> <li>Note that other than the \u201cOperator Code Type\u201d field which you should choose \u201cOP\u201d for now, leave other fields unchanged. This registration data is used for ease of testing and actual use later.</li> </ul> </li> <li>After the data is created successfully, you can press <code>Ctrl-C</code> on the terminal to quit WebConsole.</li> </ul>"},{"location":"guide/5-install-ueransim/#5-setting-free5gc-and-ueransim-parameters","title":"5. Setting free5GC and UERANSIM Parameters","text":"<p>In free5gc VM, we need to edit three files:</p> <ul> <li><code>~/free5gc/config/amfcfg.yaml</code></li> <li><code>~/free5gc/config/smfcfg.yaml</code></li> <li><code>~/free5gc/config/upfcfg.yaml</code></li> </ul> <p>First SSH into free5gc VM, and change <code>~/free5gc/config/amfcfg.yaml</code>: <pre><code>cd ~/free5gc\nnano config/amfcfg.yaml\n</code></pre></p> <p>Replace ngapIpList IP from <code>127.0.0.1</code> to <code>192.168.56.101</code>, namely from: <pre><code>...\n  ngapIpList:  # the IP list of N2 interfaces on this AMF\n  - 127.0.0.1\n</code></pre> into: <pre><code>...\n  ngapIpList:  # the IP list of N2 interfaces on this AMF\n  - 192.168.56.101  # 127.0.0.1\n</code></pre></p> <p>Next edit <code>~/free5gc/config/smfcfg.yaml</code>: <pre><code>nano config/smfcfg.yaml\n</code></pre> and in the entry <code>inside userplane_information / up_nodes / UPF / interfaces / endpoints</code>, change the IP from <code>127.0.0.8</code> to <code>192.168.56.101</code>, namely from: <pre><code>...\n  interfaces: # Interface list for this UPF\n   - interfaceType: N3 # the type of the interface (N3 or N9)\n     endpoints: # the IP address of this N3/N9 interface on this UPF\n       - 127.0.0.8\n</code></pre> into: <pre><code>...\n  interfaces: # Interface list for this UPF\n   - interfaceType: N3 # the type of the interface (N3 or N9)\n     endpoints: # the IP address of this N3/N9 interface on this UPF\n       - 192.168.56.101  # 127.0.0.8\n</code></pre> Finally, edit <code>~/free5gc/config/upfcfg.yaml</code>\uff0cand chage gtpu IP from <code>127.0.0.8</code> into <code>192.168.56.101</code>, namely from: <pre><code>...\n  gtpu:\n    forwarder: gtp5g\n    # The IP list of the N3/N9 interfaces on this UPF\n    # If there are multiple connection, set addr to 0.0.0.0 or list all the addresses\n    ifList:\n      - addr: 127.0.0.8\n        type: N3\n</code></pre> into: <pre><code>...\n  gtpu:\n    forwarder: gtp5g\n    # The IP list of the N3/N9 interfaces on this UPF\n    # If there are multiple connection, set addr to 0.0.0.0 or list all the addresses\n    ifList:\n      - addr: 192.168.56.101  # 127.0.0.8\n        type: N3\n</code></pre></p>"},{"location":"guide/5-install-ueransim/#6-setting-ueransim","title":"6. Setting UERANSIM","text":"<p>In the ueransim VM, there are two files related to free5GC\uff1a</p> <ul> <li><code>~/UERANSIM/config/free5gc-gnb.yaml</code></li> <li><code>~/UERANSIM/config/free5gc-ue.yaml</code></li> </ul> <p>The second file is for UE, which we don\u2019t have to change if the data inside is consistent with the (default) registration data we set using WebConsole previously.</p> <p>First SSH into ueransim, and edit the file <code>~/UERANSIM/config/free5gc-gnb.yaml</code>, and change the ngapIp IP, as well as the gtpIp IP, from <code>127.0.0.1</code> to <code>192.168.56.102</code>\uff0cand also change the IP in amfConfigs into <code>192.168.56.101</code>, that is, from: <pre><code>...\n  ngapIp: 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\n  gtpIp: 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n  # List of AMF address information\n  amfConfigs:\n    - address: 127.0.0.1\n</code></pre> into: <pre><code>...\n  ngapIp: 192.168.56.102  # 127.0.0.1   # gNB's local IP address for N2 Interface (Usually same with local IP)\n  gtpIp: 192.168.56.102  # 127.0.0.1    # gNB's local IP address for N3 Interface (Usually same with local IP)\n\n  # List of AMF address information\n  amfConfigs:\n    - address: 192.168.56.101  # 127.0.0.1\n</code></pre> Next we examine the file <code>~/UERANSIM/config/free5gc-ue.yaml</code>\uff0cand see if the settings is consistent with those in free5GC (via WebConsole), for example: <pre><code># IMSI number of the UE. IMSI = [MCC|MNC|MSISDN] (In total 15 or 16 digits)\nsupi: 'imsi-208930000000003'\n# Mobile Country Code value\nmcc: '208'\n# Mobile Network Code value (2 or 3 digits)\nmnc: '93'\n\n# Permanent subscription key\nkey: '8baf473f2f8fd09487cccbd7097c6862'\n# Operator code (OP or OPC) of the UE\nop: '8e27b6af0e692e750f32667a3b14605d'\n# This value specifies the OP type and it can be either 'OP' or 'OPC'\nopType: 'OP'\n\n...\n\n# Initial PDU sessions to be established\nsessions:\n  - type: 'IPv4'\n    apn: 'internet'\n    slice:\n      sst: 0x01\n      sd: 0x010203\n\n# List of requested S-NSSAIs by this UE\nslices:\n  - sst: 0x01\n    sd: 0x010203\n\n...\n</code></pre> The data appear to be the same as what we set in WebConsole.</p>"},{"location":"guide/5-install-ueransim/#7-testing-ueransim-against-free5gc","title":"7. Testing UERANSIM against free5GC","text":"<p>SSH into free5gc. If you have rebooted free5gc, remember to do: <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE\nsudo systemctl stop ufw\n</code></pre></p> <p>In addition, execute the following command: <pre><code>sudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre></p> <p>Also, make sure you have make proper changes to the free5GC configuration files, then run <code>./run.sh</code>: <pre><code>cd ~/free5gc\n./run.sh\n</code></pre></p> <p>At this time free5GC has been started.</p> <p>Next, prepare three additional SSH terminals from your host machine (if you know how to use <code>tmux</code>, you can use just one).</p> <p>In terminal 1: SSH into ueransim, make sure UERANSIM is built, and configuration files have been changed correctly, then execute <code>nr-gnb</code>: <pre><code>cd ~/UERANSIM\nbuild/nr-gnb -c config/free5gc-gnb.yaml\n</code></pre></p> <p>In terminal 2, SSH into ueransim, and execute <code>nr-ue</code> with admin right: <pre><code>cd ~/UERANSIM\nsudo build/nr-ue -c config/free5gc-ue.yaml # for multiple-UEs, use -n and -t for number and delay\n</code></pre></p> <p>In terminal 3, SSH into ueransim, and ping <code>192.168.56.101</code> to see free5gc is alive. Then, use ifconfig to see if the tunnel <code>uesimtun0</code> has been created (by nr-ue): <pre><code>$ ifconfig\n\nenp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255\n        inet6 fe80::a00:27ff:fe65:1472  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:65:14:72  txqueuelen 1000  (Ethernet)\n        RX packets 80  bytes 32423 (32.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 90  bytes 12860 (12.8 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nenp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.56.102  netmask 255.255.255.0  broadcast 192.168.56.255\n        inet6 fe80::a00:27ff:fe5e:be64  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 08:00:27:5e:be:64  txqueuelen 1000  (Ethernet)\n        RX packets 1515  bytes 130490 (130.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 1010  bytes 206670 (206.6 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 3445  bytes 174416 (174.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3445  bytes 174416 (174.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nuesimtun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 60.60.0.1  netmask 255.255.255.255  destination 60.60.0.1\n        inet6 fe80::2034:d00:a76:84b7  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 3  bytes 252 (252.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 13  bytes 732 (732.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre></p> <p>Now use <code>ping</code>: <pre><code>ping -I uesimtun0 google.com\n</code></pre> If <code>ping</code> gets replies, then free5GC is running properly. Congratulations!</p>"},{"location":"guide/6-simple-app/","title":"6 simple app","text":""},{"location":"guide/6-simple-app/#free5gc-simple-apps","title":"free5GC Simple Apps","text":"<p>In this demo we will use free5GC together with UERANSIM to exercise on some simple network applications:</p> <ul> <li><code>ping</code> + <code>tcpdump</code></li> <li><code>wget</code> and <code>curl</code></li> </ul>"},{"location":"guide/6-simple-app/#ping-tcpdump","title":"ping + tcpdump","text":"<p>First start up free5GC and ueransim VMs. This requires one SSH terminal for free5gc, and two for ueransim.</p> <p>Open another SSH terminal and log in into ueransim: <pre><code>ssh 192.168.56.102 -l ubuntu\n</code></pre> Use <code>ifconfig</code> to check if <code>uesimtun0</code> tunnel has been created, and use ping to check if we can <code>ping</code> through it\uff1a <pre><code>$ ping google.com\nPING google.com (172.217.27.142) 56(84) bytes of data.\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=1 ttl=63 time=3.98 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=2 ttl=63 time=3.87 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=3 ttl=63 time=4.06 ms\n^C\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\nrtt min/avg/max/mdev = 3.872/3.970/4.060/0.076 ms\n</code></pre></p> <pre><code>$ ping -I uesimtun0 google.com\nPING google.com (172.217.27.142) from 60.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=1 ttl=61 time=5.85 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=2 ttl=61 time=4.87 ms\n64 bytes from tsa03s02-in-f14.1e100.net (172.217.27.142): icmp_seq=3 ttl=61 time=4.76 ms\n^C\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 4.760/5.160/5.847/0.487 ms\n</code></pre> <p>Also use <code>route -n</code> to observe if current routing table shows some routing rules regarding the two network interfaces <code>enp0s3</code> and <code>enp0s8</code>: <pre><code>$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 enp0s3\n10.0.2.0        0.0.0.0         255.255.255.0   U     0      0        0 enp0s3\n10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 enp0s3\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre></p> <p>The network <code>10.0.2.0/24</code> and its <code>enp0s3</code> interface are related to VirtualBox NAT network card. We can bring down this interface: <pre><code>$ sudo ifconfig enp0s3 down\n$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre> As shown aboe we have only Host-only network <code>192.168.56.0/24</code> left. Run <code>ping</code> again: <pre><code>$ ping 8.8.8.8\nping: connect: Network is unreachable\n</code></pre></p> <p>And see that it can not ping through, but runing: <pre><code>$ ping -I uesimtun0 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) from 60.60.0.1 uesimtun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=61 time=7.17 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=61 time=5.41 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=61 time=5.15 ms\n^C\n--- 8.8.8.8 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2005ms\nrtt min/avg/max/mdev = 5.150/5.907/7.165/0.895 ms\n</code></pre></p> <p>shows some responses, since we ask <code>ping</code> to go through the free5GC core network. To make <code>ping 8.8.8.8</code> in addition to <code>ping -I uesimtun0 8.8.8.8</code> work, we can set the <code>uesimtun0</code> interface (IP <code>60.60.0.1</code>) as the new default gateway: <pre><code>$ sudo ip r add default dev uesimtun0\n$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         0.0.0.0         0.0.0.0         U     0      0        0 uesimtun0\n192.168.56.0    0.0.0.0         255.255.255.0   U     0      0        0 enp0s8\n</code></pre> Now traffic not for the <code>192.168.56.0/24</code> network will go to <code>uesimtun0</code>, and <code>ping 8.8.8.8</code> works this time: <pre><code>$ ping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=61 time=5.02 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=61 time=6.31 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=61 time=5.41 ms\n^C\n--- 8.8.8.8 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 5.017/5.581/6.312/0.541 ms\n...\n</code></pre></p> <p>Note that normally we are using ueransim to simulate \u201cterminal\u201d UE device, not as a network device or proxy, therefore the above two routing rules suffice.</p> <p>Now if we still want to run: <pre><code>$ ping google.com\nping: google.com: Temporary failure in name resolution\n</code></pre></p> <p>we will get unresolved domain name. To solve this, we can modify the file <code>/etc/resolv.conf</code>: <pre><code>sudo nano /etc/resolv.conf\n</code></pre></p> <p>and change the nameserver IP to <code>8.8.8.8</code>: <pre><code>nameserver 8.8.8.8\n</code></pre></p> <p>After the change, we can see <code>ping</code> getting responses: <pre><code>$ ping google.com\nPING google.com (216.58.200.46) 56(84) bytes of data.\n64 bytes from tsa01s08-in-f46.1e100.net (216.58.200.46): icmp_seq=1 ttl=61 time=5.19 ms\n64 bytes from tsa01s08-in-f46.1e100.net (216.58.200.46): icmp_seq=2 ttl=61 time=50.4 ms\n64 bytes from tsa01s08-in-f46.1e100.net (216.58.200.46): icmp_seq=3 ttl=61 time=5.66 ms\n^C\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 5.191/20.423/50.414/21.207 ms\n</code></pre></p> <p>We can also examine the network traffic happening underneath in the scenario above. First we open another SSH terminal into ueransim, and run the following command: <pre><code>$ sudo tcpdump -n -i any host 60.60.0.1 or 192.168.56.101\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes\n</code></pre></p> <p>then run <code>ping 8.8.8.8</code> again, wait for a couple seconds, then <code>Ctrl-C</code> to exit. We see the data packets actually going in and out <code>uesimtun0</code>. <pre><code>$ sudo tcpdump -n -i any host 60.60.0.1 or 192.168.56.101\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes\n10:24:56.138729 IP 192.168.56.101.38412 &gt; 192.168.56.102.38740: sctp (1) [HB REQ]\n10:24:56.138783 IP 192.168.56.102.38740 &gt; 192.168.56.101.38412: sctp (1) [HB ACK]\n10:24:58.456532 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 1, length 64\n10:24:58.457416 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:24:58.462136 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:24:58.462324 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 1, length 64\n10:24:59.458823 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 2, length 64\n10:24:59.459031 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:24:59.464214 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:24:59.464396 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 2, length 64\n10:25:00.461293 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 3, length 64\n10:25:00.462178 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:25:00.474941 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:25:00.475561 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 3, length 64\n10:25:01.463946 IP 60.60.0.1 &gt; 8.8.8.8: ICMP echo request, id 33, seq 4, length 64\n10:25:01.464523 IP 192.168.56.102.2152 &gt; 192.168.56.101.2152: UDP, length 100\n10:25:01.469297 IP 192.168.56.101.2152 &gt; 192.168.56.102.2152: UDP, length 92\n10:25:01.470314 IP 8.8.8.8 &gt; 60.60.0.1: ICMP echo reply, id 33, seq 4, length 64\n</code></pre></p>"},{"location":"guide/6-simple-app/#wget","title":"wget","text":"<p>Simply look for any web page for file download on the web. For example, if we choose Golang web site as an example, we may find the URL: <pre><code>https://golang.org/dl/go1.15.8.darwin-amd64.pkg\n</code></pre> Using the same network settings is the previous exercise, just <pre><code>wget https://golang.org/dl/go1.15.8.darwin-amd64.pkg\n</code></pre> And see if you can download a Golang 1.15.8 install file.</p>"},{"location":"guide/6-simple-app/#ptt-ssh-bbsupttcc","title":"ptt (<code>ssh bbsu@ptt.cc</code>)","text":"<p>You can actually use SSH in the ueransim VM to access remote site. For example, you can SSH to a well-known terminal-based BBS site in Taiwan: <pre><code>ssh bbsu@ppt.cc\n</code></pre></p>"},{"location":"guide/6-simple-app/#youtube","title":"Youtube","text":"<p>You can also use Youtube as an example app. To achieve this goal, you can install a desktop VM with graphical UI, such as Ubuntu Desktop, and follow the same procedure to install and start up UERANSIM, then access Youtube through <code>uesimtun0</code> and free5GC.</p> <p>To reduce resource consumption on your host machine, you may install Lubuntu (at https://lubuntu.me), a more light-weight Ubuntu desktop distro instead. But since viewing free5GC YouTube Channel requires quite sime CPU consumption, you may have to set at least 2 CPUs and 2048 MB memory for the VM.</p> <p>Refer to videos Access Youtube on Lubuntu (1, 2, 3, 4 and 5).</p>"},{"location":"guide/Appendix/","title":"Appendix","text":""},{"location":"guide/Appendix/#appendix","title":"Appendix","text":""},{"location":"guide/Appendix/#appendix-a-oam","title":"Appendix A: OAM","text":"<ol> <li>Run the OAM server <pre><code>cd webconsole\ngo run server.go\n</code></pre></li> <li>Access the OAM by <pre><code>URL: http://localhost:5000\nUsername: admin\nPassword: free5gc\n</code></pre></li> <li>Now you can see the information of currently registered UEs (e.g. Supi, connected state, etc.) in the core network at the tab \"DASHBOARD\" of free5GC webconsole</li> </ol> <p>Note: You can add the subscribers here too</p>"},{"location":"guide/Appendix/#appendix-b-orchestrator","title":"Appendix B: Orchestrator","text":"<p>Please refer to free5gmano</p>"},{"location":"guide/Appendix/#appendix-c-iptv","title":"Appendix C: IPTV","text":"<p>Please refer to free5GC/IPTV</p>"},{"location":"guide/Appendix/#appendix-d-system-environment-cleaning","title":"Appendix D: System Environment Cleaning","text":"<p>The below commands may be helpful for development purposes.</p> <ol> <li>Remove POSIX message queues<ul> <li><code>ls /dev/mqueue/</code></li> <li><code>rm /dev/mqueue/*</code></li> </ul> </li> <li>Remove gtp5g tunnels (using tools in libgtp5gnl)<ul> <li><code>cd ./src/upf/lib/libgtp5gnl/tools</code></li> <li><code>./gtp5g-tunnel list pdr</code></li> <li><code>./gtp5g-tunnel list far</code></li> </ul> </li> <li>Remove gtp5g devices (using tools in libgtp5gnl)<ul> <li><code>cd ./src/upf/lib/libgtp5gnl/tools</code></li> <li><code>sudo ./gtp5g-link del {Dev-Name}</code></li> </ul> </li> </ol>"},{"location":"guide/Appendix/#appendix-e-change-kernel-version","title":"Appendix E: Change Kernel Version","text":"<ol> <li>Check the previous kernel version: <code>uname -r</code></li> <li>Search specific kernel version and install, take <code>5.0.0-23-generic</code> for example <pre><code>sudo apt search 'linux-image-5.0.0-23-generic'\nsudo apt install 'linux-image-5.0.0-23-generic'\nsudo apt install 'linux-headers-5.0.0-23-generic'\n</code></pre></li> <li>Update initramfs and grub <pre><code>sudo update-initramfs -u -k all\nsudo update-grub\n</code></pre></li> <li>Reboot, enter grub and choose kernel version <code>5.0.0-23-generic</code> <pre><code>sudo reboot\n</code></pre></li> </ol>"},{"location":"guide/Appendix/#optional-remove-kernel-image","title":"Optional: Remove Kernel Image","text":"<pre><code>sudo apt remove 'linux-image-5.0.0-23-generic'\nsudo apt remove 'linux-headers-5.0.0-23-generic'\n</code></pre>"},{"location":"guide/Appendix/#appendix-f-program-the-sim-card","title":"Appendix F: Program the SIM Card","text":"<p>Install packages: <pre><code>sudo apt-get install pcscd pcsc-tools libccid python-dev swig python-setuptools python-pip libpcsclite-dev\nsudo pip install pycrypto\n</code></pre></p> <p>Download PySIM <pre><code>git clone git://git.osmocom.org/pysim.git\n</code></pre></p> <p>Change to pyscard folder and install <pre><code>cd &lt;pyscard-path&gt;\nsudo /usr/bin/python setup.py build_ext install\n</code></pre></p> <p>Verify your reader is ready</p> <pre><code>sudo pcsc_scan\n</code></pre> <p>Check whether your reader can read the SIM card <pre><code>cd &lt;pysim-path&gt;\n./pySim-read.py \u2013p 0\n</code></pre></p> <p>Program your SIM card information <pre><code>./pySim-prog.py -p 0 -x 208 -y 93 -t sysmoUSIM-SJS1 -i 208930000000003 --op=8e27b6af0e692e750f32667a3b14605d -k 8baf473f2f8fd09487cccbd7097c6862 -s 8988211000000088313 -a 23605945\n</code></pre></p> <p>You can get your SIM card from sysmocom. You also need a card reader to write your SIM card. You can get a card reader from here or use other similar devices.</p>"},{"location":"guide/Configuration/","title":"Configuration","text":""},{"location":"guide/Configuration/#configuration","title":"Configuration","text":""},{"location":"guide/Configuration/#sbi-configuration","title":"SBI Configuration","text":"<p>There are registerIP and bindingIP design on every NF's sbi interface.</p> <p></p> <p>This is due to some orchestration, such as Kubernets or OpenStack, has the design of service IP mapping.</p> <p></p> <p>Use Kubernets as an example. K8S has the service type that enable users to define the service IP outside the pod. But the service IP may be different from the IP assigned inside the pod. Therefore, if we register the binding IP inside the pod to NRF, NRF cannot know which service IP outside the pod has attached. As the result, we need to separate registerIP from bindingIP in this scenario.</p> <p>If you are not sure what IP you should set, just configure it as the same IP address.</p>"},{"location":"guide/Configuration/#sample-configuration","title":"Sample configuration","text":"<p>We provide a sample config to connect to outer ran under <code>/sample/ran_attach_config/</code>. The architecture is as following.</p> <p></p> <p>As the result, user's RAN IP must set to 192.168.0.0/24 subnet or let the routing route to this subnet.</p> <p>Notice: If user wants to use the setting, aware to set 192.168.0.1 to your host as well.</p>"},{"location":"guide/Configuration/#smf-configuration","title":"SMF Configuration","text":""},{"location":"guide/Configuration/#a-configure-smf-with-s-nssai","title":"A. Configure SMF with S-NSSAI","text":"<ol> <li>Configure NF Registration SMF S-NSSAI in <code>smfcfg.yaml</code></li> </ol>"},{"location":"guide/Configuration/#b-configure-uplink-classifier-ulcl-information-in-smf","title":"B. Configure Uplink Classifier (ULCL) information in SMF","text":"<ol> <li>Configure UE routing path in <code>uerouting.yaml</code></li> </ol> <ul> <li>DestinationIP and DestinationPort will be the packet destination.</li> <li>UPF field will be the packet datapath when it match the destination above.</li> </ul> <p>For more detail of SMF config, please refer to here.</p>"},{"location":"guide/Environment/","title":"Environment","text":""},{"location":"guide/Environment/#recommended-environment","title":"Recommended Environment","text":"<p>free5gc has been tested against the following environment:</p> <ul> <li>Software<ul> <li>OS: Ubuntu 20.04.1</li> <li>gcc 7.3.0</li> <li>Go 1.14.4 linux/amd64</li> <li>kernel version 5.4.0-42-generic</li> </ul> </li> </ul> <p>The listed kernel version is required for the UPF element.</p> <ul> <li> <p>Minimum Hardware</p> <ul> <li>CPU: Intel i5 processor</li> <li>RAM: 4GB</li> <li>Hard drive: 160GB</li> <li>NIC: Any 1Gbps Ethernet card supported in the Linux kernel</li> </ul> </li> <li> <p>Recommended Hardware</p> <ul> <li>CPU: Intel i7 processor</li> <li>RAM: 8GB</li> <li>Hard drive: 160GB</li> <li>NIC: Any 10Gbps Ethernet card supported in the Linux kernel</li> </ul> </li> </ul> <p>This guide assumes that you will run all 5GC elements on a single machine.</p>"},{"location":"guide/New-Subscriber-via-webconsole/","title":"New Subscriber via webconsole","text":""},{"location":"guide/New-Subscriber-via-webconsole/#new-subscriber-via-webconsole","title":"New Subscriber via webconsole","text":""},{"location":"guide/New-Subscriber-via-webconsole/#1-install-webconsole","title":"1. Install webconsole","text":""},{"location":"guide/New-Subscriber-via-webconsole/#2-optionaldelete-mongodb","title":"2. (Optional)Delete MongoDB","text":"<p>If another version of free5GC was ran before, you have to delete MongoDB.</p> <pre><code>$ mongo --eval \"db.dropDatabase()\" free5gc\n</code></pre>"},{"location":"guide/New-Subscriber-via-webconsole/#3-run-webconsole-server","title":"3. Run WebConsole server","text":"<pre><code>$ cd ~/free5gc/webconsole\n$ ./bin/webconsole\n</code></pre>"},{"location":"guide/New-Subscriber-via-webconsole/#4-use-browser-to-connect-to-webconsole","title":"4. Use browser to connect to WebConsole","text":"<p>Enter :5000 in URL bar. <pre><code>Username: admin\nPassword: free5gc\n</code></pre>"},{"location":"guide/New-Subscriber-via-webconsole/#5-add-new-subscriber","title":"5. Add new subscriber","text":"<ul> <li>Choose SUBSCRIBERS in the left side and press New Subscriber button</li> <li>Fill the data and press Submit button</li> </ul>"},{"location":"guide/New-Subscriber-via-webconsole/#6-new-subscriber-is-added-successfully","title":"6. New subscriber is added successfully","text":""},{"location":"guide/New-Subscriber-via-webconsole/#7-modify-the-existed-subscriber","title":"7. Modify the existed subscriber","text":"<p>There are some issues for subscriber modification. If you want to modify the existed subscriber, please <code>Delete</code> it first and <code>New</code> again for now.</p>"},{"location":"guide/SMF-Config/","title":"SMF Config","text":""},{"location":"guide/SMF-Config/#smf-config-ulcl-config","title":"SMF Config / ULCL Config","text":"<p>This document explains the detail of SMF config. Also provide some examples about conversion between config file and real userplane topology</p> <p>ULCL limitation: The branching UPF now can't connect to the Internet.  It only serves as a Intranet in the UPF topology. (Please refers to the topology of example 2)</p>"},{"location":"guide/SMF-Config/#sbi","title":"SBI","text":"Field meaning scheme The protocol for SBI registerIPv4 IP used to register to NRF bindingIPv4 IP used to bind the service port SMF bind the SBI service to this port"},{"location":"guide/SMF-Config/#pfcp","title":"PFCP","text":"Field meaning addr The IP address of N4 interface on the SMF (PFCP)"},{"location":"guide/SMF-Config/#userplane-information","title":"Userplane Information","text":"Field meaning userplane_information Includes topology and information of RAN and UPFs which are controlled by this SMF up_nodes The node in the user plane topology. Includes gNodeB, I-UPF and A-UPF links The edge in the user plane topology type Indicate it is RAN or specific kind of  UPF node_id The PFCP IPv4 address for UPF <p>Note: up_resource_ip serves as default user plane IP for the UPF. In this version, UPF will determine its user plane IP by itself. So setting up_resource_ip in SMF config won't affect real config in user plane.</p>"},{"location":"guide/SMF-Config/#amf-config","title":"AMF Config","text":"<p>To understand whole PDU session config, we must take a step forward to understand the AMF config.</p> Field meaning NGAPIPList The IP list of N2 interfaces on the AMF SBI Same meaning with SMF/SBI."},{"location":"guide/SMF-Config/#example-1","title":"Example 1","text":""},{"location":"guide/SMF-Config/#smf-config","title":"SMF Config","text":"<ul> <li>sbi:<ul> <li>scheme: http</li> <li>registerIPv4: 127.0.0.2</li> <li>bindingIPv4: 127.0.0.2</li> <li>port: 8000</li> </ul> </li> <li>pfcp:<ul> <li>addr: 10.200.200.1</li> </ul> </li> <li>userplane_information:<ul> <li>up_nodes:<ul> <li>gNB1:<ul> <li>type: AN</li> </ul> </li> <li>UPF:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.102</li> </ul> </li> </ul> </li> <li>links:<ul> <li>A: gNB1</li> <li>B: UPF</li> </ul> </li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#amf-config_1","title":"AMF Config","text":"<ul> <li>ngapIpList:<ul> <li>127.0.0.1</li> </ul> </li> <li>sbi:<ul> <li>scheme: http</li> <li>registerIPv4: 127.0.0.18</li> <li>bindingIPv4: 127.0.0.18</li> <li>port: 8000</li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#representing-topology","title":"Representing Topology","text":""},{"location":"guide/SMF-Config/#example-2","title":"Example 2","text":""},{"location":"guide/SMF-Config/#smf-config_1","title":"SMF Config","text":"<ul> <li>sbi:<ul> <li>scheme: https</li> <li>registerIPv4: 127.0.0.2</li> <li>bindingIPv4: 127.0.0.2</li> <li>port: 29502</li> </ul> </li> <li>pfcp:<ul> <li>addr: 10.200.200.1</li> </ul> </li> <li>userplane_information:<ul> <li>up_nodes:<ul> <li>gNB1:<ul> <li>type: AN</li> </ul> </li> <li>BranchingUPF:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.102</li> </ul> </li> <li>AnchorUPF1:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.101</li> </ul> </li> <li>AnchorUPF2:<ul> <li>type: UPF</li> <li>node_id: 10.200.200.103</li> </ul> </li> <li>links:</li> <li>A: gNB1     B: BranchingUPF</li> <li>A: BranchingUPF     B: AnchorUPF1</li> <li>A: BranchingUPF     B: AnchorUPF2</li> </ul> </li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#amf-config_2","title":"AMF Config","text":"<ul> <li>ngapIpList:<ul> <li>127.0.0.1</li> </ul> </li> <li>sbi:<ul> <li>scheme: https</li> <li>registerIPv4: 127.0.0.18</li> <li>bindingIPv4: 127.0.0.18</li> <li>port: 8000</li> </ul> </li> </ul>"},{"location":"guide/SMF-Config/#representing-topology_1","title":"Representing Topology","text":""},{"location":"guide/Trouble_Shooting/","title":"Trouble Shooting","text":""},{"location":"guide/Trouble_Shooting/#trouble-shooting","title":"Trouble Shooting","text":""},{"location":"guide/Trouble_Shooting/#1-error-sctp-failed-to-connect-given-amf-n3iwfngap","title":"1. <code>ERROR: [SCTP] Failed to connect given AMF    N3IWF=NGAP</code>","text":"<p>This error occured when N3IWF was started before AMF finishing initialization. This error usually appears when you run the TestNon3GPP in the first time.</p> <p>Rerun the test should be fine. If it still not be solved, larger the sleeping time in line 110 of <code>test.sh</code>.</p>"},{"location":"guide/Trouble_Shooting/#2-testnon3gpp","title":"2. TestNon3GPP","text":"<p>TestNon3GPP will modify the <code>config/amfcfg.conf</code>. So, if you had killed the TestNon3GPP test before it finished, you might need to copy <code>config/amfcfg.conf.bak</code> back to <code>config/amfcfg.conf</code> to let other tests pass.</p> <p><code>cp config/amfcfg.conf.bak config/amfcfg.conf</code></p>"},{"location":"guide/Trouble_Shooting/#3-db-on-tls-to-h2c","title":"3. DB on TLS to H2C","text":"<p>If you meet any problems about https or mogodb, it maybe couse our new version from v3.0.1 to v3.0.2 has change http to H2C verion. Try the command below.</p> <p><code>mongo --eval \"db.NfProfile.drop()\" free5gc</code></p>"},{"location":"guide/Trouble_Shooting/#4-mqcreate-error-creating-message-queue-too-many-open-files-upfutil-upf","title":"4. <code>MQCreate() Error creating message queue: Too many open files UPF=Util</code> (UPF)","text":"<p>Remove POSIX message queues</p> <pre><code>ls /dev/mqueue/\nrm /dev/mqueue/*\n</code></pre>"},{"location":"guide/Trouble_Shooting/#5-remove-gtp-devices-using-tools-in-libgtp5gnl-upf","title":"5. Remove gtp devices (using tools in libgtp5gnl) (UPF)","text":"<pre><code>cd lib/libgtp5gnl/tools\nsudo ./gtp5g-link del {Dev-Name}\n</code></pre>"},{"location":"guide/Trouble_Shooting/#6-upf-cli-run-error-open-gtp5g-open-link-create-file-exists","title":"6. <code>UPF Cli Run Error: open Gtp5g: open link: create: file exists</code>","text":"<pre><code>sudo ip link del upfgtp\n</code></pre>"},{"location":"guide/Trouble_Shooting/#7-decode-http2-packet-in-wireshark","title":"7. Decode HTTP/2 packet in Wireshark","text":"<ol> <li> <p>Run Network Function</p> <p>Check has XXFsslkey.log</p> </li> <li> <p>Edit &gt;&gt; Preference &gt;&gt; Protocols &gt;&gt; SSL (TLS)</p> <p></p> </li> <li> <p>Add keylog</p> <p></p> </li> <li> <p>Filter http2</p> <p></p> </li> </ol>"},{"location":"guide/Trouble_Shooting/#7-decode-h2c-http2-clear-text-without-tls","title":"7. Decode H2C (HTTP2 clear text without TLS)","text":"<p>The similar reason as NEA0 NAS message. Althrough H2C is clear text, wirshark still considers these packets as the normal TCP packets and does not decode them by HTTP2.</p> <p>To see the details of H2C packets, do the following configuration.</p> <ol> <li> <p>Analyze \u2192 Decode As\u2026</p> <p></p> </li> <li> <p>click Add button to add the decode rules</p> <p></p> <p>Decode the packets from the TCP ports listened by each NF as HTTP2 packets.</p> </li> </ol>"},{"location":"guide/features/","title":"Features","text":""},{"location":"guide/features/#free5gc-specification","title":"free5GC Specification","text":"<ul> <li>3GPP TS 23.501/23.502-Rel-15</li> <li>5G Standalone (SA) supported</li> <li>Serviced-Based Interface (SBI) supported<ul> <li>Namf, Nsmf, Nausf, Nudm, Nudr, Nnssf, Nnrf, Npcf</li> </ul> </li> <li>N1, N2, N3, N4, N6, N9, interfaces supported</li> <li>5G SA Network Functions supported:<ul> <li>AMF: Access and Mobility Management Function<ul> <li>Registration Management, Connection Management, Reachability Management, Mobility Management, and Authentication</li> </ul> </li> <li>SMF: Session Management Function<ul> <li>Session Management, IP Assigning/Management</li> </ul> </li> <li>UPF: User Plane Function<ul> <li>Support multiple UPF and ULCL (uplink classifier)</li> <li>Session and Service Continuity (SSC) mode 1</li> <li>Packet Routing/Forwarding</li> </ul> </li> <li>AUSF: Authentication Server Function</li> <li>NRF: NF Repository Function</li> <li>UDM: Unified Data Management</li> <li>UDR: Unified Data Repository</li> <li>PCF: Policy and Charging Function</li> <li>NSSF: Network Slice Selection Function</li> <li>N3IWF: Non-3GPP Interworking Function</li> </ul> </li> </ul>"},{"location":"guide/features/#supported-features","title":"Supported features","text":"<ul> <li>Registration<ul> <li>Initial Registration</li> <li>Periodic Registration</li> <li>Mobility Registration</li> </ul> </li> <li>Authentication<ul> <li>5G-AKA</li> <li>EAP-AKA'</li> </ul> </li> <li>NAS Security<ul> <li>Ciphering: NEA0, NEA1, NEA2, NEA3</li> <li>Integrity: NIA0, NIA1, NIA2, NIA3</li> </ul> </li> <li>Deregistration:<ul> <li>UE-initiated Deregistration</li> </ul> </li> <li>Service Request:<ul> <li>UE triggered Service Request</li> <li>Network Triggered Service Request</li> </ul> </li> <li>AN Release</li> <li>PDU Session Establishment</li> <li>PDU Session Modification (v3.3.0)</li> <li>PDU Session Release</li> <li>Handover<ul> <li>N2 Handover (Indirect mode not supported)</li> <li>Xn Handover</li> </ul> </li> <li>QoS<ul> <li>Control Plane only:<ol> <li>5QI, ARP, GBR, MBR of QoS Flow (v3.3.0)</li> <li>Session-AMBR supported</li> </ol> </li> </ul> </li> <li>Collection and reporting of usage data over N4 interface<ul> <li>Volume measurement periodically</li> </ul> </li> <li>UP Security</li> <li>Multiple UPFs and ULCL (Uplink Classifier)</li> <li>Multiple Slice and DNN</li> <li>Dynamic/Static IPv4 address allocation</li> </ul>"},{"location":"guide/hardware/","title":"Hardware","text":""},{"location":"guide/hardware/#hardware-tested","title":"Hardware Tested","text":"<p>Some 5G UE and gNodeB hardware have been tested with free5GC by partners or community members:</p> <ul> <li> <p>5G UE (Support 5G SA):</p> <ul> <li>APAL 5G Dongle</li> <li>APAL 5G MiFi</li> <li>Samsung S21 5G</li> <li>Huawei P40 5G (forum link)</li> <li>Huawei Mate30 5G (forum link)</li> </ul> </li> <li> <p>gNodeB:</p> <ul> <li>Alpha gNodeB</li> <li>Compal gNodeB</li> <li>FII gNodeB</li> <li>ITRI gNodeB</li> <li>Lions gNodeB</li> <li>Amarisoft gNodeB (forum link)</li> <li>Nokia gNodeB (forum link)</li> <li>Nokia (AMIA AirScale Indoor Subrack 473098A)</li> </ul> </li> </ul> <p>Reports of tested hardware not listed above on Github issue or free5GC forum are welcome.</p> <p>PS: if you don't have any hardware available, we suggest to use UERANSIM to simulate.</p> <p>(Refer to Advanced environment setup section)</p>"},{"location":"membership/","title":"Index","text":""},{"location":"membership/#sponsorship-info","title":"Sponsorship Info","text":""},{"location":"membership/#sponsorship-tiers","title":"Sponsorship Tiers","text":"<p>free5GC is a nonprofit organization dedicated to developing innovative and next-generation features for open-source code of  the 5G Core (5GC) Network under Apache 2.0 license.  Your generous support and sponsorship will sustain our technology development and the operation of the community. Your company/organization logo will be displayed on the free5GC website and listed as the sponsorship you participate. Here are the sponsorship tiers we offer.</p> <ul> <li>Sponsor \u2013 donation under US $17,000 </li> <li>Bronze Sponsor \u2013 donation from US $17,000 to US $34,000</li> <li>Silver Sponsor \u2013 donation from US $34,000 to US $68,000</li> <li>Gold Sponsor \u2013 donation from US $68,000 to US $102,000</li> <li>Platinum Sponsor \u2013 donation for more than US $102,000</li> </ul> <p>Your generosity is appreciated.</p> <p>Tips</p> <ul> <li>You don\u2019t need to donate to use free5GC. You can download free5GC from https://github.com/free5gc/free5gc.</li> <li>The license of free5GC follows Apache 2.0. That is, anyone can use free5GC for commercial purposes for free. We will not charge any license fee.</li> </ul>"},{"location":"support/","title":"Index","text":""},{"location":"support/#technical-support","title":"Technical Support","text":"<p>If you encounter the usage problem on free5GC, please join our official forum forum.free5gc.org and initiate a new discussion.</p> <p>Otherwise, you can raise the issue on our GitHub repository for reporting the bugs/suggestions (related to vulnerability/functionality/deployment/testing), or create the pull request for contributing to our community!</p> <p>Tips</p> <p>If your problem can not be solved via the platforms listed above, please send an email to <code>free5GC.org@gmail.com</code> directly. Thanks.</p>"}]}